<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MVVM</title>
    <url>/2020/08/15/MVVM/</url>
    <content><![CDATA[<h1 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h1><h3 id="什么是MVVM"><a href="#什么是MVVM" class="headerlink" title="什么是MVVM"></a>什么是<code>MVVM</code></h3><h4 id="View层"><a href="#View层" class="headerlink" title="View层"></a><code>View</code>层</h4><p>视图层</p>
<p>在我们前端开发中，通常就是DOM层</p>
<p>主要的作用是给用户展示各种信息</p>
<h4 id="Model层"><a href="#Model层" class="headerlink" title="Model层"></a><code>Model</code>层</h4><p>数据层</p>
<p>数据可能是我们固定的死数据，更多的是来自我们服务器，网络上请求下来的数据</p>
<p>在我们的计数器案例中，就是后面抽取出来的<code>obj</code></p>
<h4 id="VueModel层"><a href="#VueModel层" class="headerlink" title="VueModel层"></a><code>VueModel</code>层</h4><p>视图模型层</p>
<p>视图模型层是<code>View</code>和<code>Model</code>沟通的桥梁</p>
<p>一方面它实现了<code>Data Binding</code>,也就是数据绑定，将<code>Model</code>的改变实时反应到<code>View</code>中</p>
<p>另一方面它实现了一些事件（点击、滚动、touch等）时，可以监听到，并在需要的情况下改变对应的Data。</p>
]]></content>
  </entry>
  <entry>
    <title>MVVM与MVC的区别</title>
    <url>/2020/08/27/MVVM%E4%B8%8EMVC%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p><strong>MVVM模式的优点：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、低耦合：MVVM模式中，数据是独立于UI的，ViewModel只负责处理和提供数据，UI想怎么处理数据都由UI自己决定，ViewModel不涉及任何和UI相关的事，即使控件改变（input换成p）,ViewModel几乎不需要更改任何代码，专注自己的数据处理就可以了</span><br><span class="line"></span><br><span class="line">2.自动同步数据:ViewModel通过双向数据绑定把View层和Model层连接了起来，View和Model这两者可以自动同步。程序员不需要手动操作DOM, 不需要关注数据状态的同步问题，MVVM 统一管理了复杂的数据状态维护</span><br><span class="line"></span><br><span class="line">3、可重用性：你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑。</span><br><span class="line"></span><br><span class="line">4、独立开发：开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计。</span><br><span class="line"></span><br><span class="line">5、可测试：ViewModel里面是数据和业务逻辑，View中关注的是UI，这样的做测试是很方便的，完全没有彼此的依赖，不管是UI的单元测试还是业务逻辑的单元测试，都是低耦合的</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>MVVM 和 MVC 的区别：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvc 和 mvvm 其实区别并不大。都是一种设计思想，主要区别如下：</span><br><span class="line">1.mvc 中 Controller演变成 mvvm 中的 viewModel</span><br><span class="line">2.mvvm 通过数据来驱动视图层的显示而不是节点操作。</span><br><span class="line">3.mvc中Mmodel和View是可以直接打交道的，造成Model层和View层之间的耦合度高。而mvvm中Model和View不直接交互，而是通过中间桥梁ViewModel来同步</span><br><span class="line">4.mvvm主要解决了:mvc中大量的DOM 操作使页面渲染性能降低，加载速度变慢，影响用户体验。</span><br></pre></td></tr></table></figure>

<h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
  </entry>
  <entry>
    <title>promise</title>
    <url>/2021/01/15/promise/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Promise对象是ES6（ ECMAScript 2015 ）对于异步编程提供的一种解决方案，比传统的	解决方案——回调函数和事件——更合理和更强大。</span><br><span class="line">Promise本身不是异步的，只不过Promise中可以有异步任务，new Promise()的第一个函数参数是立马执行的。</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    	<span class="function"><span class="title">if</span>(<span class="params">a &gt; <span class="number">10</span></span>)</span>&#123;</span><br><span class="line">        	resolve(a)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        	reject(b)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">func1(<span class="string">&#x27;11&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别resolve 和 reject。它们是两个函数，由 JavaScript 引擎提供。<br>1.resolve函数的作用是： 将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 fulfilled），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；</p>
<p>2.reject函数的作用是： 将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p>
<p>Promise对象实例的方法，then 和 catch：<br>1  .then方法： 用于指定调用成功时的回调函数。<br>    then方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例），因此可以采用链式写法，即then方法后面再调用另一个then方法。</p>
<p>2  .catch方法： 用于指定发生错误时的回调函数。</p>
]]></content>
  </entry>
  <entry>
    <title>Node——express中cookie,session使用</title>
    <url>/2021/02/28/Node%E2%80%94%E2%80%94express%E4%B8%ADcookie-session%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="1-Cookie-和-Session"><a href="#1-Cookie-和-Session" class="headerlink" title="1.Cookie 和 Session"></a>1.Cookie 和 Session</h3><p> 会话管理：客户端和服务端通信过程中的数据是如何管理的</p>
<p> 会话管理的技术：数据存在客户端 Cookie</p>
<p> 数据存在服务端 Session</p>
<p> <strong>Cookie</strong>: http请求是无状态的。也就是说即使第一次和服务器连接后并且登录成功后，第二次请求服务器依然不能知道当前请求是哪个用户。cookie的出现就是为了解决这个问题，第一次登录后服务器返回一些数据（cookie）给浏览器，然后浏览器保存在本地，当该用户发送第二次请求的时候，就会自动的把上次请求存储的cookie数据自动的携带给服务器，服务器通过浏览器携带的数据就能判断当前用户是哪个了。cookie存储的数据量有限，不同的浏览器有不同的存储大小，但一般不超过4KB。因此使用cookie只能存储一些小量的数据</p>
<p> <strong>Session</strong>: session和cookie的作用有点类似，都是为了存储用户相关的信息。不同的是，cookie是存储在本地浏览器，而session存储在服务器。存储在服务器的数据会更加的安全，不容易被窃取。但存储在服务器也有一定的弊端，就是会占用服务器的资源</p>
<h5 id="1-1-express中使用cookie-parser中间件"><a href="#1-1-express中使用cookie-parser中间件" class="headerlink" title="1.1 express中使用cookie-parser中间件"></a>1.1 express中使用cookie-parser中间件</h5><p><img src="file:///D:/Blog/HexoBlog/source/image/cookie/%E5%9B%BE%E7%89%871.png" alt="cookie"></p>
<h6 id="1-1-1-安装：npm-install-cookie-parser-S"><a href="#1-1-1-安装：npm-install-cookie-parser-S" class="headerlink" title="1.1.1 安装：npm install cookie-parser -S"></a>1.1.1 安装：npm install cookie-parser -S</h6><h6 id="1-1-2-引包：const-cookieParser-require-‘cookie-parser’"><a href="#1-1-2-引包：const-cookieParser-require-‘cookie-parser’" class="headerlink" title="1.1.2 引包：const cookieParser = require(‘cookie-parser’)"></a>1.1.2 引包：const cookieParser = require(‘cookie-parser’)</h6><h6 id="1-1-3-配置cookie-parser中间件"><a href="#1-1-3-配置cookie-parser中间件" class="headerlink" title="1.1.3 配置cookie-parser中间件"></a>1.1.3 配置cookie-parser中间件</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const cookieParser &#x3D; require(&#39;cookie-parser&#39;)</span><br><span class="line"></span><br><span class="line">app.use(cookieParser(&#39;secret&#39;))</span><br></pre></td></tr></table></figure>

<h6 id="1-1-4在服务器通过res-cookie-方法创建一个cookie"><a href="#1-1-4在服务器通过res-cookie-方法创建一个cookie" class="headerlink" title="1.1.4在服务器通过res.cookie()方法创建一个cookie"></a>1.1.4在服务器通过res.cookie()方法创建一个cookie</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cookie的配置参数：</span><br><span class="line">maxAge  : 是cookie最大的有效时间 单位为毫秒</span><br><span class="line">expires ：是cookie的过期时间  是一个date对象</span><br><span class="line">httpOnly ： 当前cookie是否只能被web服务器获取</span><br><span class="line">singed:  是否对cookie进行签名(防止cookie被用户在浏览器修改)</span><br><span class="line">path：   是cookie的有效访问路径(如果没有设置，则默认为根路径)</span><br><span class="line">        比如我们设置了path:&quot;&#x2F;&quot; ，即意味着访问当前网站的任何接口都会携带cookie</span><br><span class="line">        比如我们设置了path:&quot;&#x2F;user&quot;，即意味着只有访问有&#x2F;user开头的接口才会在请求中携带cookie</span><br></pre></td></tr></table></figure>

<h6 id="1-1-5设置cookie的请求"><a href="#1-1-5设置cookie的请求" class="headerlink" title="1.1.5设置cookie的请求"></a>1.1.5设置cookie的请求</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app.get(&quot;&#x2F;setCookie&quot;,(req,res)&#x3D;&gt;&#123;</span><br><span class="line">    res.cookie(&quot;name&quot;,&quot;cookiename&quot;,      &#123;path:&quot;&#x2F;user&quot;,maxAge:600000,httpOnly:true,&#39;signed&#39;:true&#125;)</span><br><span class="line">    res.send(&#39;setcookie&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="1-1-6-浏览器再次请求服务器的时候会将之前创建的cookie放在请求头中发送给服务器-服务器此时可以通过req-cookies来查看当前的cookie"><a href="#1-1-6-浏览器再次请求服务器的时候会将之前创建的cookie放在请求头中发送给服务器-服务器此时可以通过req-cookies来查看当前的cookie" class="headerlink" title="1.1.6 浏览器再次请求服务器的时候会将之前创建的cookie放在请求头中发送给服务器,服务器此时可以通过req.cookies来查看当前的cookie"></a>1.1.6 浏览器再次请求服务器的时候会将之前创建的cookie放在请求头中发送给服务器,服务器此时可以通过req.cookies来查看当前的cookie</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app.get(&quot;&#x2F;getCookie&quot;,(req,res)&#x3D;&gt;&#123;</span><br><span class="line">    &#x2F;&#x2F;如果没有对cookie进行签名，则通过req.cookies来获取cookie</span><br><span class="line">    &#x2F;&#x2F;如果对cookie进行了签名，则通过req.signedCookies来获取cookie</span><br><span class="line">    console.log(req.cookies,req.signedCookies)  &#x2F;&#x2F; &#123;&#125; &#123;&#125;</span><br><span class="line">    res.send(&#39;getcookie&#39;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&quot;&#x2F;user&quot;,(req,res)&#x3D;&gt;&#123;</span><br><span class="line">    console.log(req.cookies,req.signedCookies) &#x2F;&#x2F; &#123;&#125; &#123;name: &#39;cookiename&#39;&#125;</span><br><span class="line">    res.send(&#39;getcookie&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="1-1-7-Cookie记住用户名"><a href="#1-1-7-Cookie记住用户名" class="headerlink" title="1.1.7 Cookie记住用户名"></a>1.1.7 Cookie记住用户名</h6><p><img src="file:///D:/Blog/HexoBlog/source/image/cookie/%E5%9B%BE%E7%89%872.png" alt="cookie"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const express &#x3D; require(&#39;express&#39;)</span><br><span class="line"></span><br><span class="line">const bodyParser &#x3D; require(&#39;body-parser&#39;)</span><br><span class="line"></span><br><span class="line">const cookieParser &#x3D; require(&#39;cookie-parser&#39;)</span><br><span class="line"></span><br><span class="line">const app &#x3D; express()</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line">app.engine(&#39;html&#39;, require(&#39;express-art-template&#39;))</span><br><span class="line">app.set(&#39;views&#39;, __dirname + &#39;&#x2F;views&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(cookieParser(&#39;xiaoxiong&#39;))</span><br><span class="line"></span><br><span class="line">app.get(&#39;&#x2F;login&#39;, (req,res) &#x3D;&gt; &#123;</span><br><span class="line">  if(req.signedCookies.name) &#123;</span><br><span class="line">    res.render(&#39;login.html&#39;,&#123;</span><br><span class="line">      name: req.signedCookies.name</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.render(&#39;login.html&#39;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&#39;&#x2F;usercenter&#39;, (req,res) &#x3D;&gt; &#123;</span><br><span class="line">  if(req.signedCookies.name) &#123;</span><br><span class="line">    res.render(&#39;usercenter.html&#39;,&#123;</span><br><span class="line">      name: req.signedCookies.name</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.render(&#39;usercenter.html&#39;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(&#39;&#x2F;login&#39;,(req,res) &#x3D;&gt; &#123;</span><br><span class="line">  let name &#x3D; req.body.name</span><br><span class="line">  let pwd &#x3D; req.body.pwd</span><br><span class="line">  let rmbname &#x3D; req.body.rmbname</span><br><span class="line">  &#x2F;&#x2F; console.log(name+&#39;---&#39;+pwd+&#39;---&#39;+&#39;---&#39;+rmbname)</span><br><span class="line">  if(rmbname &#x3D;&#x3D; &#39;on&#39;) &#123;</span><br><span class="line">    if(name &#x3D;&#x3D; &#39;朱艳&#39; &amp;&amp; pwd &#x3D;&#x3D; &#39;zhuyan&#39;) &#123;</span><br><span class="line">      res.cookie(&#39;name&#39;,name,&#123;</span><br><span class="line">        maxAge: 60000,</span><br><span class="line">        httpOnly: true,</span><br><span class="line">        &#39;signed&#39;: true</span><br><span class="line">      &#125;)</span><br><span class="line">      res.redirect(&#39;&#x2F;usercenter&#39;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      res.send(&#39;账号或者密码有误&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    if(name &#x3D;&#x3D; &#39;朱艳&#39; &amp;&amp; pwd &#x3D;&#x3D; &#39;zhuyan&#39;) &#123;</span><br><span class="line">      res.redirect(&#39;&#x2F;usercenter&#39;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      res.send(&#39;账号或者密码错误&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(3000, () &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;running..&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="2-1express中express-session中间件"><a href="#2-1express中express-session中间件" class="headerlink" title="2.1express中express-session中间件"></a>2.1express中express-session中间件</h5><h6 id="2-1-1-安装：npm-install-express-session-S"><a href="#2-1-1-安装：npm-install-express-session-S" class="headerlink" title="2.1.1 安装：npm install express-session -S"></a>2.1.1 安装：npm install express-session -S</h6><h6 id="2-1-2-引包：const-expressSession-require-‘express-session’"><a href="#2-1-2-引包：const-expressSession-require-‘express-session’" class="headerlink" title="2.1.2 引包：const expressSession = require(‘express-session’)"></a>2.1.2 引包：<em>const</em> expressSession = require(‘express-session’)</h6><h6 id="2-1-3-配置中间件"><a href="#2-1-3-配置中间件" class="headerlink" title="2.1.3 配置中间件"></a>2.1.3 配置中间件</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app.use(expressSession(&#123;</span><br><span class="line">  name : &quot;cookieid&quot;,  &#x2F;&#x2F;指定所创建的session对应的cookie的名字</span><br><span class="line">  secret : &#39;secret&#39;,  &#x2F;&#x2F;指定是否要签名这个cookie</span><br><span class="line">  &#x2F;&#x2F;resave: 强制保存 session 即使它并没有变化,。默认为 true。建议设置成 false。但是这个并不一定是必须的，如果客户端有两个并行的请求到你的服务端，</span><br><span class="line">  &#x2F;&#x2F; 一个请求对session的修改可能被另外一个请求覆盖掉，即使第二个请求并没有修改session</span><br><span class="line">  resave : false,</span><br><span class="line">  &#x2F;&#x2F; rolling:强制在每一个response中都发送session标识符的cookie。roling默认是false。如果把这个值设置为true但是  saveUnitialized设置为false,</span><br><span class="line">  &#x2F;&#x2F; 没有初始化的session的cookie不会被包含在响应中。主要作用：每次请求都重置cookie过期时间</span><br><span class="line">  rolling: true,</span><br><span class="line">  &#x2F;&#x2F; 强制没有“初始化”的session保存到storage(store:保存session的地方)中，</span><br><span class="line">  &#x2F;&#x2F; 没有初始化的session指的是刚被创建没有被修改。默认是true,但是不建议使用默认值</span><br><span class="line">  saveUninitialized: false, </span><br><span class="line">  cookie : &#123;</span><br><span class="line">      maxAge : 1000 * 60 * 3,   &#x2F;&#x2F;指定session对应的cookie的有效时间</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>

<h6 id="2-1-4设置session"><a href="#2-1-4设置session" class="headerlink" title="2.1.4设置session"></a>2.1.4设置session</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app.get(&#39;&#x2F;setsession&#39;, (req,res) &#x3D;&gt; &#123;</span><br><span class="line">  req.session.userinfo &#x3D; &#39;xiaoyang&#39;</span><br><span class="line">  res.send(&#39;setsession&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="2-1-5-得到session"><a href="#2-1-5-得到session" class="headerlink" title="2.1.5 得到session"></a>2.1.5 得到session</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app.get(&#39;&#x2F;getsession&#39;, (req,res) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(req.session)</span><br><span class="line">  res.send(req.session.userinfo)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="2-1-6-session登录案例"><a href="#2-1-6-session登录案例" class="headerlink" title="2.1.6 session登录案例"></a>2.1.6 session登录案例</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const express &#x3D; require(&#39;express&#39;)</span><br><span class="line"></span><br><span class="line">const expressSession &#x3D; require(&#39;express-session&#39;)</span><br><span class="line"></span><br><span class="line">const bodyParser &#x3D; require(&#39;body-parser&#39;)</span><br><span class="line"></span><br><span class="line">const app &#x3D; express()</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line">app.engine(&#39;html&#39;, require(&#39;express-art-template&#39;))</span><br><span class="line">app.set(&#39;views&#39;, __dirname + &#39;&#x2F;views&#39;)</span><br><span class="line"></span><br><span class="line">app.use(expressSession(&#123;</span><br><span class="line">  name: &quot;cookieid&quot;,  &#x2F;&#x2F;指定所创建的session对应的cookie的名字</span><br><span class="line">  secret: &#39;secret&#39;,  &#x2F;&#x2F;指定是否要签名这个cookie</span><br><span class="line">  resave: false,</span><br><span class="line">  rolling: true,</span><br><span class="line">  saveUninitialized: false,</span><br><span class="line">  cookie: &#123;</span><br><span class="line">    maxAge: 1000 * 60 * 3,   &#x2F;&#x2F;指定session对应的cookie的有效时间</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.get(&#39;&#x2F;login&#39;, (req,res) &#x3D;&gt; &#123;</span><br><span class="line">  let user &#x3D; req.session.user</span><br><span class="line">  console.log(user)</span><br><span class="line">  res.render(&#39;login.html&#39;,user)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(&#39;&#x2F;login&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 获取请求参数信息</span><br><span class="line">  let name &#x3D; req.body.name</span><br><span class="line">  let pwd &#x3D; req.body.pwd</span><br><span class="line">  &#x2F;&#x2F; 如果用户登录成功 则把用户的信息存储到session中</span><br><span class="line">  if (name &#x3D;&#x3D; &#39;sessionName&#39; &amp;&amp; pwd &#x3D;&#x3D; &#39;123&#39;) &#123;</span><br><span class="line">    &#x2F;&#x2F; 存储会话数据</span><br><span class="line">    req.session.user &#x3D; req.body</span><br><span class="line">    &#x2F;&#x2F; 跳转到用户中心页面</span><br><span class="line">    res.redirect(&#39;&#x2F;usercenter&#39;)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    res.send(&#39;账号或者密码错误&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&#39;&#x2F;usercenter&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 从session中获取之前保存的数据</span><br><span class="line">  let user &#x3D; req.session.user</span><br><span class="line">  console.log(user)</span><br><span class="line">  if (user &amp;&amp; user.name) &#123;</span><br><span class="line">    res.render(&#39;usercenter.html&#39;, &#123;</span><br><span class="line">      name: user.name</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    res.render(&#39;usercenter.html&#39;, &#123;</span><br><span class="line">      name: &#39;default&#39;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 退出的登录</span><br><span class="line">app.get(&#39;&#x2F;layout&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 清空session</span><br><span class="line">  req.session.destroy()</span><br><span class="line">  res.redirect(&#39;&#x2F;home&#39;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&#39;&#x2F;home&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class="line">  let user &#x3D; req.session.user</span><br><span class="line">  if (user &amp;&amp; user.name) &#123;</span><br><span class="line">    res.render(&quot;home.html&quot;, &#123; name: user.name &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">    res.render(&quot;home.html&quot;, &#123; name: &quot;default&quot; &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(3000, () &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;running...&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>react与vue的区别</title>
    <url>/2021/02/12/react%E4%B8%8Evue%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>React与Vue存在很多相似之处，例如他们都是JavaScript的UI框架，专注于创造前端的富应用。不同于早期的JavaScript框架“功能齐全”，Reat与Vue只有框架的骨架，其他的功能如路由、状态管理等是框架分离的组件。</p>
<p>1.react整体是函数式的思想，把组件设计成纯组件，状态和逻辑通过参数传入，所以在react中，是单向数据流，推崇结合immutable来实现数据不可变。react在setState之后会重新走渲染的流程，如果shouldComponentUpdate返回的是true，就继续渲染，如果返回了false，就不会重新渲染，PureComponent就是重写了shouldComponentUpdate，然后在里面作了props和state的浅层对比。而vue的思想是响应式的，也就是基于是数据可变的，通过对每一个属性建立Watcher来监听，当属性变化的时候，响应式的更新对应的虚拟dom。</p>
<p>2.react是类式的写法，api很少，而vue是声明式的写法，通过传入各种options，api和参数都很多。所以react结合typescript更容易一起写，vue稍微复杂。</p>
<p>react整体的思路就是函数式，所以推崇纯组件，数据不可变，单向数据流，当然需要双向的地方也可以做到，比如结合redux-form，而vue是基于可变数据的，支持双向绑定。react组件的扩展一般是通过高阶组件，而vue组件会使用mixin。vue内置了很多功能，而react做的很少，很多都是由社区来完成的，vue追求的是开发的简单，而react更在乎方式是否正确。</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/08/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>react特点</title>
    <url>/2021/02/10/react%E7%89%B9%E7%82%B9/</url>
    <content><![CDATA[<h2 id="React-特点"><a href="#React-特点" class="headerlink" title="React 特点"></a>React 特点</h2><ul>
<li><strong>1.声明式设计</strong> −React采用声明范式，可以轻松描述应用。</li>
<li><strong>2.高效</strong> −React通过对DOM的模拟，最大限度地减少与DOM的交互。</li>
<li><strong>3.灵活</strong> −React可以与已知的库或框架很好地配合。</li>
<li><strong>4.JSX</strong> − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。</li>
<li><strong>5.组件</strong> − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。</li>
<li><strong>6.单向响应的数据流</strong> − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>react性能优化</title>
    <url>/2021/03/07/react%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h3 id="React性能优化"><a href="#React性能优化" class="headerlink" title="React性能优化"></a>React性能优化</h3><blockquote>
<h4 id="react凭借virtual-DOM和diff算法拥有高效的性能，除此之外也有很多其他的方法和技巧可以进一步提升react性能。"><a href="#react凭借virtual-DOM和diff算法拥有高效的性能，除此之外也有很多其他的方法和技巧可以进一步提升react性能。" class="headerlink" title="react凭借virtual DOM和diff算法拥有高效的性能，除此之外也有很多其他的方法和技巧可以进一步提升react性能。"></a>react凭借virtual DOM和diff算法拥有高效的性能，除此之外也有很多其他的方法和技巧可以进一步提升react性能。</h4></blockquote>
<h4 id="1-使用React-Memo-来缓存组件"><a href="#1-使用React-Memo-来缓存组件" class="headerlink" title="1. 使用React.Memo()来缓存组件"></a>1. 使用<code>React.Memo()</code>来缓存组件</h4><blockquote>
<p>父组件的每次状态更新，都会导致子组件重新渲染，即使传入子组件的状态没有变化，当类组件的输入属性相同时可以使用<code>pureComponent</code>或<code>shouldComponentUdate</code>来避免组件的渲染，函数组件中我们可以使用<code>React.memo</code>来缓存组件，这样只有当传入组件的状态值发生变化时才会重新渲染。如果传入相同的值，则返回缓存的组件。示例如下:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default React.memo(props) &#x3D;&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;&#123;props.value&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="React-memo（浅比较）"><a href="#React-memo（浅比较）" class="headerlink" title="React.memo（浅比较）"></a><code>React.memo（浅比较）</code></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#39;react&#39;;</span><br><span class="line">import AreEqual from &#39;.&#x2F;component&#x2F;AreEqual&#39;;</span><br><span class="line"></span><br><span class="line">class App extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      val: 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      val: this.state.val</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;this.handleClick&#125;&gt;点击&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;AreEqual &#123;...this.state&#125; &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br><span class="line">import React from &#39;react&#39;;</span><br><span class="line"></span><br><span class="line">function areEqual(prevProps, nextProps) &#123;</span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 如果把nextProps传入render方法的返回结果与将</span><br><span class="line">   * preProps传入render方法的返回结果一致则返回true</span><br><span class="line">   * 否则返回false</span><br><span class="line">   *&#x2F;</span><br><span class="line">  if (prevProps.val &#x3D;&#x3D;&#x3D; nextProps.val) &#123;</span><br><span class="line">    return true;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function AreEqual(props) &#123;</span><br><span class="line">  console.log(&quot;渲染了&quot;);</span><br><span class="line">  const &#123; val &#125; &#x3D; props;</span><br><span class="line">  return &lt;div&gt;</span><br><span class="line">    &#123;val&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; React.memo()两个参数 第一个是纯函数，第二个是比较函数</span><br><span class="line">export default React.memo(AreEqual, areEqual);</span><br></pre></td></tr></table></figure>

<h4 id="2-React-PureComponent"><a href="#2-React-PureComponent" class="headerlink" title="2. React.PureComponent"></a>2. <code>React.PureComponent</code></h4><blockquote>
<p>作用：</p>
<ol>
<li><code>React.PureComponent</code>和<code>React.Component</code>类似，都是定义一个组件类。</li>
<li>不同的是<code>React.Component</code>没有实现<code>shouldComponentUpdate()</code>，而<code>React.PureComponent</code>通过props和state的浅比较实现了。</li>
<li><code>React.PureComponent</code>是作用在类中，<code>React.memo</code>是作用在函数中</li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Children extends React.PureComponent &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        &lt;div&gt;&#123;this.props.name&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default class App extends React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;Children name&#x3D;&#123;&#39;这是React.pureComponent的使用方法&#39;&#125; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-使用useMemo缓存大量的计算"><a href="#3-使用useMemo缓存大量的计算" class="headerlink" title="3. 使用useMemo缓存大量的计算"></a>3. 使用<code>useMemo</code>缓存大量的计算</h4><blockquote>
<p>有时渲染是不可避免的，但如果您的组件是一个功能组件，重新渲染会导致每次都调用大型计算函数，这是非常消耗性能的，我们可以使用新的<code>useMemo</code>钩子来“记忆”这个计算函数的计算结果。这样只有传入的参数发生变化后，该计算函数才会重新调用计算新的结果。<br>通过这种方式，您可以使用从先前渲染计算的结果来挽救昂贵的计算耗时。总体目标是减少JavaScript在呈现组件期间必须执行的工作量，以便主线程被阻塞的时间更短。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 避免这样做</span><br><span class="line">function Component(props) &#123;</span><br><span class="line">  const someProp &#x3D; heavyCalculation(props.item);</span><br><span class="line">  return &lt;AnotherComponent someProp&#x3D;&#123;someProp&#125; &#x2F;&gt; </span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F; 只有 &#96;props.item&#96; 改变时someProp的值才会被重新计算</span><br><span class="line">function Component(props) &#123;</span><br><span class="line">  const someProp &#x3D; useMemo(() &#x3D;&gt; heavyCalculation(props.item), [props.item]);</span><br><span class="line">  return &lt;AnotherComponent someProp&#x3D;&#123;someProp&#125; &#x2F;&gt; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-使用React-PureComponent-shouldComponentUpdate"><a href="#4-使用React-PureComponent-shouldComponentUpdate" class="headerlink" title="4.使用React.PureComponent, shouldComponentUpdate"></a>4.使用<code>React.PureComponent</code>, <code>shouldComponentUpdate</code></h4><blockquote>
<p>父组件状态的每次更新，都会导致子组件的重新渲染，即使是传入相同props。但是这里的重新渲染不是说会更新DOM,而是每次都会调用diif算法来判断是否需要更新DOM。这对于大型组件例如组件树来说是非常消耗性能的。<br>在这里我们就可以使用<code>React.PureComponent</code> ,<code>shouldComponentUpdate</code>生命周期来确保只有当组件props状态改变时才会重新渲染。如下例子:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default function ParentComponent(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;SomeComponent someProp&#x3D;&#123;props.somePropValue&#125; &#x2F;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;AnotherComponent someOtherProp&#x3D;&#123;props.someOtherPropValue&#125; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line"> )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default function SomeComponent(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;&#123;props.someProp&#125;&lt;&#x2F;div&gt;  </span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 只要props.somePropValue 发生变化，不论props.someOtherPropValue是否发生变化该组件都会发生变化</span><br><span class="line">export default function AnotherComponent(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;&#123;props.someOtherProp&#125;&lt;&#x2F;div&gt;  </span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>React.PureComponent</code>、<code>shouldComponentUpdate</code>性能优化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 第一种优化</span><br><span class="line">class AnotherComponent extends React.PureComponent &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;div&gt;&#123;this.props.someOtherProp&#125;&lt;&#x2F;div&gt;   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第二种优化</span><br><span class="line">class AnotherComponent extends Component &#123;</span><br><span class="line">  shouldComponentUpdate(nextProps) &#123;</span><br><span class="line">    return this.props !&#x3D;&#x3D; nextProps</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;div&gt;&#123;this.props.someOtherProp&#125;&lt;&#x2F;div&gt;   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>PureComponent</code>会进行浅比较来判断组件是否应该重新渲染，对于传入的基本类型props，只要值相同，浅比较就会认为相同，对于传入的引用类型props，浅比较只会认为传入的props是不是同一个引用，如果不是，哪怕这两个对象中的内容完全一样，也会被认为是不同的props。<br>需要注意的是在对于那些可以忽略渲染时间的组件或者是状态一直变化的组件则要谨慎使用<code>PureComponent</code>，因为进行浅比较也会花费时间，这种优化更适用于大型的展示组件上。大型组件也可以拆分成多个小组件，并使用memo来包裹小组件，也可以提升性能。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>vue-router原理</title>
    <url>/2020/09/28/vue-router%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>vue-router的原理就是监听URL地址变化，从而渲染不同的组件。</p>
<p>vue-router的模式主要有hash模式和history模式。</p>
<p>1.hash模式的原理(url带有#号部分)：<br>    hash模式的特点：在切换路由的时候，不会向服务器发送请求，但是刷新网页的时候，此时会向服务器发送请求，在向服务器发送请求的时候，hash部分的信息是不会发送到服务器的，所以此时刷新网页没有问题</p>
<p>2.history模式的原理(url中通过/表示路径)<br>    内部使用window.history.pushState来处理url的变化，切换对应的组件<br>    history模式的特点：在切换路由的时候，不会向服务器发送请求，但是当刷新网页的时候，此时会向服务器发送请求，如果后端没有对应的接口与此匹配，此时会报资源找不到的错误<br>history模式一般情况下不能刷新网页</p>
]]></content>
  </entry>
  <entry>
    <title>vue-router导航钩子</title>
    <url>/2021/10/05/vue-router%E5%AF%BC%E8%88%AA%E9%92%A9%E5%AD%90/</url>
    <content><![CDATA[<p>1、全局守卫： router.beforeEach  router.beforeResolve  router.afterEach<br>    const router = new VueRouter({ … });<br>    router.beforeEach((to, from, next) =&gt; {<br>        // do someting<br>    });<br>    //to:代表要进入的目标，它是一个路由对象<br>    //from:代表当前正要离开的路由，同样也是一个路由对象<br>    //next:这是一个必须需要调用的方法，而具体的执行效果则依赖 next 方法调用的参数</p>
<pre><code>//全局后置钩子，后置钩子并没有 next 函数，也不会改变导航本身
router.afterEach((to, from) =&gt; &#123;
    // do someting
&#125;);</code></pre>
<p>2、路由独享的守卫： beforeEnter<br>    cont router = new VueRouter({<br>        routes: [<br>            {<br>                path: ‘/file’,<br>                component: File,<br>                beforeEnter: (to, from ,next) =&gt; {<br>                    // do someting<br>                }<br>            }<br>        ]<br>    });</p>
<p>3、组件内的守卫： beforeRouteEnter、beforeRouteUpdate (2.2 新增)、beforeRouteLeave<br>    const File = {<br>        template: <code>&lt;div&gt;This is file&lt;/div&gt;</code>,<br>        beforeRouteEnter(to, from, next) {<br>            // do someting<br>            // 在渲染该组件的对应路由被 confirm 前调用<br>        },<br>        beforeRouteUpdate(to, from, next) {<br>            // do someting<br>            // 在当前路由改变，但是依然渲染该组件是调用<br>        },<br>        beforeRouteLeave(to, from ,next) {<br>            // do someting<br>            // 导航离开该组件的对应路由时被调用<br>        }<br>    }</p>
]]></content>
  </entry>
  <entry>
    <title>vue3.0</title>
    <url>/2020/11/19/vue3.0%E4%B8%8Evue2.0%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="vue3-0和vue2-0比较"><a href="#vue3-0和vue2-0比较" class="headerlink" title="vue3.0和vue2.0比较"></a>vue3.0和vue2.0比较</h2><p>vue3.0 的发布与 vue2.0 相比，优势主要体现在：更快、更小、更易维护、更易于原生、让开发者更轻松；</p>
<p><strong>更快</strong></p>
<p>　　1、virtual DOM 完全重写，mounting &amp; patching 提速 100%；</p>
<p>　　2、更多编译时 （compile-time）提醒以减少 runtime 开销；</p>
<p>　　3、基于 Proxy 观察者机制以满足全语言覆盖以及更好的性能；</p>
<p>　　4、放弃 Object.defineProperty ，使用更快的原生 Proxy；</p>
<p>　　5、组件实例初始化速度提高 100%;</p>
<p>　　6、提速一倍/内存使用降低一半；</p>
<p><strong>更小</strong></p>
<p>　　1、Tree-shaking 更友好；（<em>tree shaking</em> 是一个术语，通常用于描述移除 JavaScript 上下文中的未引用代码(dead-code)）</p>
<p>　　2、新的 core runtime：~ 10kb gzipped；</p>
]]></content>
  </entry>
  <entry>
    <title>vuex</title>
    <url>/2020/12/10/vuex/</url>
    <content><![CDATA[<p>vuex是一个仓库用来管理一个项目所有共享的状态，它是vue的状态管理器。</p>
<p>vuex的使用：</p>
<p>在 Vue 的单页面应用中使用，需要使用<code>Vue.use(Vuex)</code>调用插件。将其注入到Vue根实例中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vuex from &#39;vuex&#39;</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line">const store &#x3D; new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    doneTodos: (state, getters) &#x3D;&gt; &#123;</span><br><span class="line">      return state.todos.filter(todo &#x3D;&gt; todo.done)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state, payload) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    addCount(context) &#123;</span><br><span class="line">      &#x2F;&#x2F; 可以包含异步操作</span><br><span class="line">      &#x2F;&#x2F; context 是一个与 store 实例具有相同方法和属性的 context 对象</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F; 注入到根实例</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  &#x2F;&#x2F; 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件</span><br><span class="line">  store,</span><br><span class="line">  template: &#39;&lt;App&#x2F;&gt;&#39;,</span><br><span class="line">  components: &#123; App &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>然后改变状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$store.commit(&#39;increment&#39;)</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>vue传值方法</title>
    <url>/2020/09/15/vue%E4%BC%A0%E5%80%BC%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h4 id="vue组件传值几种方式"><a href="#vue组件传值几种方式" class="headerlink" title="vue组件传值几种方式"></a>vue组件传值几种方式</h4><ul>
<li><p>父组件通过prop向子组件传值</p>
</li>
<li><p>子组件通过this.$emit()触发父组组件传递过来的方法向父组件传值</p>
</li>
<li><p>兄弟组件之间不能直接传值，需要通过父组件来做间接传值，在这种情况下推荐使用vuex</p>
</li>
<li><p>中央事件总线  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Bus.$emit 发送消息</span></span><br><span class="line">Bus.$emit(<span class="string">&#x27;inceptMessage&#x27;</span>, <span class="built_in">this</span>.msg)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Bus.$on  接收消息</span></span><br><span class="line">Bus.$on(<span class="string">&#x27;inceptMessage&#x27;</span>,<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">this</span>.fromComponentAMsg = msg</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li>provide和inject</li>
</ul>
<ul>
<li><code>this.$refs</code>和<code>this.$parent</code></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>vue基本语法</title>
    <url>/2021/03/19/vue%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Vue基本语法"><a href="#Vue基本语法" class="headerlink" title="Vue基本语法"></a>Vue基本语法</h1><h3 id="插值操作"><a href="#插值操作" class="headerlink" title="插值操作"></a>插值操作</h3><h4 id="Mustache"><a href="#Mustache" class="headerlink" title="Mustache"></a><code>Mustache</code></h4><p><code>Mustache</code>语法:双大括号</p>
<p><code>Mustache</code>:胡须/胡子</p>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;firstName+&#x27; &#x27;+lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;counter*2&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">`#app`</span>, <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                message: <span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                firstName: <span class="string">&#x27;Kobe&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                lastName: <span class="string">&#x27;Bryant&#x27;</span>,</span></span><br><span class="line">                counter: 1900</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-once指令"><a href="#v-once指令" class="headerlink" title="v-once指令"></a><code>v-once</code>指令</h4><p>只会在第一次显示数据，之后修改并不会改变</p>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">`#app`</span>, <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                message: <span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a><code>v-html</code></h4><p>解析字符串，识别a标签，并且能解析<code>href</code>地址</p>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-html</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">`#app`</span>, <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                url:&#x27;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a><code>v-text</code></h4><p>用起来并不灵活，会覆盖后面的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;h2 v-once&gt;&#123;&#123;message&#125;&#125;,李银河&lt;&#x2F;h2&gt;            &#x2F;&#x2F;你好啊,李银河</span><br><span class="line">        &lt;h2 v-text&#x3D;&quot;message&quot;&gt;,李银河&lt;&#x2F;h2&gt;            &#x2F;&#x2F;你好啊</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        let app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#96;#app&#96;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                message: &#39;你好啊&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a><code>v-pre</code></h4><p>不解析<code>Mustache</code>语法，将内容原封不动输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;h2 v-pre&gt;&#123;&#123;message&#125;&#125;,李银河&lt;&#x2F;h2&gt;        &#x2F;&#x2F;&#123;&#123;message&#125;&#125;,李银河</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        let app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#96;#app&#96;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                message: &#39;你好啊&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a><code>v-cloak</code></h4><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a><code>v-bind</code></h4><p>动态绑定属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">        &lt;a v-bind:href&#x3D;&quot;url&quot;&gt;百度一下&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;let app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#96;#app&#96;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                message: &#39;你好啊&#39;,</span><br><span class="line">                url:&#39;https:&#x2F;&#x2F;www.baidu.com&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>语法糖（简写）：</p>
<p><a :href="url">百度一下</a></p>
<h4 id="v-bind动态绑定class属性"><a href="#v-bind动态绑定class属性" class="headerlink" title="v-bind动态绑定class属性"></a><code>v-bind</code>动态绑定<code>class</code>属性</h4><p>点击按钮切换<code>class</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- css --&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">        .active&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">        .line&#123;</span><br><span class="line">            font-size: larger;</span><br><span class="line">        &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- html --&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;h2 class&#x3D;&quot;title&quot; v-bind:class&#x3D;&quot;&#123;active:isActive,line:isLine&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;button v-on:click&#x3D;&quot;btnClick&quot;&gt;切换&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;let app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#96;#app&#96;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                message:&#39;Hello Vuejs&#39;,</span><br><span class="line">                isActive:true,</span><br><span class="line">                isLine:true</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                btnClick:function()&#123;</span><br><span class="line">                    this.isActive&#x3D;!this.isActive,</span><br><span class="line">                    this.isLine&#x3D;!this.isLine</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>



<p><img src="https://i.loli.net/2020/11/05/OAr2TMR5pLj9vPw.png" alt="v-bind绑定class.png"></p>
<p><strong>v-bind绑定class.png</strong></p>
<p><img src="https://i.loli.net/2020/11/05/cTLMvb8mFaRqlu5.png" alt="v-bind绑定class2.png"></p>
<p><strong>v-bind绑定class2.png</strong></p>
<h5 id="绑定方式一、对象语法"><a href="#绑定方式一、对象语法" class="headerlink" title="绑定方式一、对象语法"></a>绑定方式一、对象语法</h5><p>用法有：</p>
<p>1、通过一个对象绑定一个类(可以传多个值)，并且和普通类同时存在并不冲突</p>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;active:isActive,line:isLine&#125;&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、如果用法过于复杂，可以放在一个<code>methods</code>或者<code>computed</code>中</p>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//hmtl</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;getClasses()&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">//js</span><br><span class="line">let app = new Vue(&#123;</span><br><span class="line">            el: `#app`,</span><br><span class="line">            data: &#123;</span><br><span class="line">                message:&#x27;Hello Vuejs&#x27;,</span><br><span class="line">                isActive:true,</span><br><span class="line">                isLine:true</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                btnClick:function()&#123;</span><br><span class="line">                    this.isActive=!this.isActive,</span><br><span class="line">                    this.isLine=!this.isLine</span><br><span class="line">                &#125;,</span><br><span class="line">                getClasses:function()&#123;</span><br><span class="line">                    return &#123;active:this.isActive,line:this.isLine&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>

<h5 id="绑定方式二、数组语法"><a href="#绑定方式二、数组语法" class="headerlink" title="绑定方式二、数组语法"></a>绑定方式二、数组语法</h5><p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;active&#x27;,&#x27;line&#x27;]&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：其中<code>active</code>加引号就是字符串，不加引号就是变量</p>
<h4 id="v-bind绑定style"><a href="#v-bind绑定style" class="headerlink" title="v-bind绑定style"></a>v-<code>bind</code>绑定<code>style</code></h4><h5 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h5><p>属性值需要加引号，使之解析成为字符串，不加引号就会解析成为变量,如下50px必须加引号，否则会被当成变量解析</p>
<p>对象的值可以来自于<code>data</code>中的属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h2 class&#x3D;&quot;title&quot; :style&#x3D;&quot;&#123;fontSize:&#39;50px&#39;&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h2 class&#x3D;&quot;title&quot; :style&#x3D;&quot;&#123;fontSize:finaSize + &#39;px&#39;,backgroundColor:finaColor&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;h2&gt;</span><br></pre></td></tr></table></figure>



<p><img src="https://i.loli.net/2020/11/05/xpUDdeOoZSz6cV3.png" alt="v-bind绑定style.png"></p>
<p><strong>v-bind绑定style.png</strong></p>
<h5 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h2 class&#x3D;&quot;title&quot; :style&#x3D;&quot;[baseStyle1 , baseStyle2]&quot;&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;h2&gt;</span><br></pre></td></tr></table></figure>





<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">     message:&#39;Hello Vuejs&#39;,</span><br><span class="line">     baseStyle1:&#123;backgroundColor:&#39;red&#39;&#125;,</span><br><span class="line">     baseStyle2:&#123;fontSize:&#39;100px&#39;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>计算属性</title>
    <url>/2020/09/05/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><h3 id="什么是计算属性"><a href="#什么是计算属性" class="headerlink" title="什么是计算属性"></a>什么是计算属性</h3><p>我们知道，在模板中可以直接通过插值语法显示一些data中的数据</p>
<p>但是在某些情况下，我们可能需要对数据进行一些转化后再显示，或者需要将多个数据结合起来进行显示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">比如我们有&#96;firstName&#96;和&#96;lastName&#96;两个变量，我们需要显示完整的名称</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">但是如果多个地方都需要显示完整的名称，我们就需要写多个&#96;&#123;&#123;firstName&#125;&#125;&#96;和&#96;&#123;&#123;lastName&#125;&#125;&#96;</span><br></pre></td></tr></table></figure>

<p>我们可以将上面的代码换成计算属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们发现计算属性是写在实例的&#96;computed&#96;选项中的</span><br></pre></td></tr></table></figure>





<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName+&#x27;  &#x27;+lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">`#app`</span>,</span></span><br><span class="line">            data: &#123; </span><br><span class="line"><span class="javascript">                firstName: <span class="string">&#x27;Lebron&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                lastName:<span class="string">&#x27;James&#x27;</span> </span></span><br><span class="line">            &#125;,</span><br><span class="line">            computed:&#123;</span><br><span class="line"><span class="javascript">                <span class="comment">/* 计算属性，一般不用动词 */</span></span></span><br><span class="line"><span class="javascript">                fullName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;  &#x27;</span> + <span class="built_in">this</span>.lastName</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                getFullName ()&#123;</span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;  &#x27;</span> + <span class="built_in">this</span>.lastName</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>计算属性不要加小括号()</p>
<h3 id="计算属性的复杂操作"><a href="#计算属性的复杂操作" class="headerlink" title="计算属性的复杂操作"></a>计算属性的复杂操作</h3><p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>总价格:&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">`#app`</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                books: [</span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">id</span>: <span class="number">110</span>, <span class="attr">name</span>: <span class="string">&#x27;Unix编程艺术&#x27;</span>, <span class="attr">price</span>: <span class="number">119</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">id</span>: <span class="number">111</span>, <span class="attr">name</span>: <span class="string">&#x27;代码大全&#x27;</span>, <span class="attr">price</span>: <span class="number">105</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">id</span>: <span class="number">112</span>, <span class="attr">name</span>: <span class="string">&#x27;深入理解计算机原理&#x27;</span>, <span class="attr">price</span>: <span class="number">98</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">id</span>: <span class="number">113</span>, <span class="attr">name</span>: <span class="string">&#x27;现代操作系统&#x27;</span>, <span class="attr">price</span>: <span class="number">87</span> &#125;,</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            computed: &#123;</span><br><span class="line"><span class="javascript">                totalPrice: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> result  =<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.books.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                        result += <span class="built_in">this</span>.books[i].price</span></span><br><span class="line">                    &#125;</span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> result</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="计算属性的setter和getter"><a href="#计算属性的setter和getter" class="headerlink" title="计算属性的setter和getter"></a>计算属性的<code>setter</code>和<code>getter</code></h3><p>我们之前在计算属性的基础操作中使用了一个方法<code>fullName</code>,如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fullName:function()&#123;</span><br><span class="line">                    return this.firstName + &#39;  &#39; + this.lastName</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>

<p>其实是这样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">                fullName:&#123;</span><br><span class="line">                    set:function()&#123;</span><br><span class="line"></span><br><span class="line">                    &#125;,</span><br><span class="line">                    get:function()&#123;</span><br><span class="line">                        return this.firstName + &#39;  &#39; + this.lastName</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>set</code>属性是不需要实现的，我们不希望计算属性有<code>set</code>属性，其实计算属性是个只读属性，如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">                fullName:&#123;</span><br><span class="line">                    get:function()&#123;</span><br><span class="line">                        return this.firstName + &#39;  &#39; + this.lastName</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>我们方便使用就使用第一种方式</p>
<p><strong>计算属性的方法，即使调用多次，计算属性也只是调用了一次，内部是有缓存的</strong>，如果方法的返回结果不变，就不会重复调用多次，直接调用缓存。</p>
<p><strong>使用<code>methods</code>的时候，调用几次，函数就会调用几次</strong></p>
]]></content>
  </entry>
  <entry>
    <title>微信小程序 wxml语法列表渲染、条件渲染</title>
    <url>/2020/09/20/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20wxml%E8%AF%AD%E6%B3%95%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93%E3%80%81%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/</url>
    <content><![CDATA[<p> 1.页面层数据绑定：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line"> data: &#123;</span><br><span class="line">    text: <span class="string">&quot;This is page data.&quot;</span>,</span><br><span class="line">    classname:<span class="string">&quot;hello&quot;</span>,</span><br><span class="line">    name:<span class="string">&quot;xiaoming&quot;</span>,</span><br><span class="line">    id:<span class="number">1</span>,</span><br><span class="line">    flag:<span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;text&gt;&#123;&#123;text&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;&#123;&#123;classname&#125;&#125;&quot;</span>&gt;&lt;/view&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123;<span class="string">&#x27;abc&#x27;</span>&#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123;<span class="number">111</span>&#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123;<span class="number">111</span>*<span class="number">999</span>&#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123;<span class="string">&quot;hello&quot;</span> + name&#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123;flag?<span class="string">&quot;真的&quot;</span>:<span class="string">&quot;假的&quot;</span>&#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;checkbox checked=<span class="string">&quot;&#123;&#123;false&#125;&#125;&quot;</span>&gt;  <span class="comment">//这边不能直接&lt;checkbox checked=&quot;false&quot;&gt;，因为js中只要不是非空字符串，他的值都是true，我们可以通过mustache插值表达式解决该问题</span></span><br><span class="line">&lt;view id=<span class="string">&quot;item-&#123;&#123;id&#125;&#125;&quot;</span>&gt; &lt;/view&gt;</span><br><span class="line">&lt;view hidden=<span class="string">&quot;&#123;&#123;flag ? true : false&#125;&#125;&quot;</span>&gt; Hidden &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">.hello&#123;</span><br><span class="line">  width: <span class="number">100</span>px;</span><br><span class="line">  height: <span class="number">100</span>px;</span><br><span class="line">  background: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  2.wxs语法</p>
<p>WXS（WeiXin Script）是小程序的一套脚本语言，结合 <code>WXML</code>，可以构建出页面的结构。</p>
<p>WXS存在的意义就是充当compute/filter这类功能。wxs不支持es6语法。</p>
<p>WXS 与 JavaScript 是不同的语言，有自己的语法，并不和 JavaScript 一致。</p>
<p>WXS 代码可以编写在 wxml 文件中的 <code>&lt;wxs&gt;</code> 标签内，或以 <code>.wxs</code> 为后缀名的文件内。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 声明一个wxs模块 : 不支持es6</span><br><span class="line">    需要指定模块的名字 module --&gt;</span><br><span class="line">&lt;wxs module&#x3D;&quot;dateFormat&quot;&gt;</span><br><span class="line">  &#x2F;&#x2F;准备一个时间格式化的方法</span><br><span class="line">  var format &#x3D; function(date)&#123;</span><br><span class="line">      &#x2F;&#x2F;根据时间戳使用小程序提供的getDate()方法得到一个时间</span><br><span class="line">      var time &#x3D; getDate(date);</span><br><span class="line">      var year &#x3D; time.getFullYear();</span><br><span class="line">      var month &#x3D; time.getMonth() + 1;</span><br><span class="line">      var date &#x3D; time.getDate();</span><br><span class="line">      var hour &#x3D; time.getHours();</span><br><span class="line">      var minute &#x3D; time.getMinutes();</span><br><span class="line">      var second &#x3D; time.getSeconds();</span><br><span class="line">      month &#x3D; month &lt; 10 ? &quot;0&quot; + month : month;</span><br><span class="line">      date &#x3D; date &lt; 10 ? &quot;0&quot; + date : date;</span><br><span class="line">      hour &#x3D; hour &lt; 10 ? &quot;0&quot; + hour : hour;</span><br><span class="line">      minute &#x3D; minute &lt; 10 ? &quot;0&quot; + minute : minute;</span><br><span class="line">      second &#x3D; second &lt; 10 ? &quot;0&quot; + second : second;</span><br><span class="line">      return year + &quot;-&quot; + month + &quot;-&quot; + date + &quot; &quot; + hour + &quot;:&quot; + minute + &quot;:&quot; + second;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  var format2 &#x3D; function(msg)&#123;</span><br><span class="line">    var reg &#x3D; getRegExp(&#39;小&#39;, &quot;g&quot;);</span><br><span class="line">    return msg.replace(reg, &quot;大&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var msg &#x3D; &quot;hello world&quot;;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;将外部需要使用的信息导出</span><br><span class="line">  module.exports &#x3D; &#123;</span><br><span class="line">    format : format,</span><br><span class="line">    format2:format2</span><br><span class="line">    msg:msg</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;wxs&gt;</span><br><span class="line">&lt;text&gt;&#123;&#123;dateFormat.format(now)&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">&lt;text&gt;&#123;&#123;dateFormat.format2(&quot;小小的&quot;)&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">&lt;text&gt;&#123;&#123;dateFormat.msg&#125;&#125;&lt;&#x2F;text&gt;</span><br></pre></td></tr></table></figure>

<p>3 .wxml语法</p>
<p>3.1列表渲染</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    text: <span class="string">&quot;This is page data.&quot;</span>,</span><br><span class="line">    classname:<span class="string">&quot;hello&quot;</span>,</span><br><span class="line">    todos:[</span><br><span class="line">      &#123;</span><br><span class="line">        name:<span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">        completed:<span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">&quot;java&quot;</span>,</span><br><span class="line">        completed: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">&quot;c#&quot;</span>,</span><br><span class="line">        completed: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&lt;!--</span><br><span class="line">  wx:<span class="keyword">for</span>-item=<span class="string">&quot;ele&quot;</span>  给遍历的每一项取别名，默认名字是item</span><br><span class="line">  wx:<span class="keyword">for</span>-index=<span class="string">&quot;idx&quot;</span>  给遍历的每一项序号取别名，默认是index</span><br><span class="line">  --&gt;</span><br><span class="line">  &lt;view wx:<span class="keyword">for</span>=<span class="string">&quot;&#123;&#123;todos&#125;&#125;&quot;</span> wx:<span class="keyword">for</span>-item=<span class="string">&quot;ele&quot;</span> wx:<span class="keyword">for</span>-index=<span class="string">&quot;idx&quot;</span>&gt;</span><br><span class="line">     &lt;text&gt;&#123;&#123;idx&#125;&#125;&lt;/text&gt;</span><br><span class="line">     &lt;text&gt;&#123;&#123;ele.name&#125;&#125;&lt;/text&gt;</span><br><span class="line">     &lt;checkbox checked=<span class="string">&quot;&#123;&#123;ele.completed&#125;&#125;&quot;</span>&gt;&lt;/checkbox&gt;</span><br><span class="line">  &lt;/view&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="wx-key-提高列表渲染时排序的效率"><a href="#wx-key-提高列表渲染时排序的效率" class="headerlink" title="wx:key   提高列表渲染时排序的效率"></a>wx:key   提高列表渲染时排序的效率</h3></blockquote>
<p><code>wx:key</code> 的值以两种形式提供</p>
<ol>
<li><p>字符串，代表在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变。</p>
</li>
<li><p>保留关键字 <code>*this</code> 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字。比如数组[“a”,”b”,”c”]这样的数组就可以wx:key = “*this”</p>
</li>
</ol>
<p>3.2条件渲染</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--wxml--&gt;</span><br><span class="line">&lt;view wx:if&#x3D;&quot;&#123;&#123;view &#x3D;&#x3D; &#39;WEBVIEW&#39;&#125;&#125;&quot;&gt; WEBVIEW &lt;&#x2F;view&gt;</span><br><span class="line">&lt;view wx:elif&#x3D;&quot;&#123;&#123;view &#x3D;&#x3D; &#39;APP&#39;&#125;&#125;&quot;&gt; APP &lt;&#x2F;view&gt;</span><br><span class="line">&lt;view wx:else&#x3D;&quot;&#123;&#123;view &#x3D;&#x3D; &#39;MINA&#39;&#125;&#125;&quot;&gt; MINA &lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; page.js</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    view: &#39;MINA&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--条件渲染和for循环结合使用--&gt;</span><br><span class="line">&lt;view wx:for&#x3D;&quot;&#123;&#123;[1,2,3,4,5,6,7,8,9]&#125;&#125;&quot;  wx:for-item&#x3D;&quot;i&quot; &gt;</span><br><span class="line">    &lt;view wx:for&#x3D;&quot;&#123;&#123;[1,2,3,4,5,6,7,8,9]&#125;&#125;&quot;  wx:for-item&#x3D;&quot;j&quot; &gt;</span><br><span class="line">      &lt;view wx:if&#x3D;&quot;&#123;&#123;i&lt;&#x3D;j&#125;&#125;&quot;&gt;</span><br><span class="line">         &#123;&#123;i&#125;&#125;*&#123;&#123;j&#125;&#125;&#x3D;&#123;&#123;i*j&#125;&#125;</span><br><span class="line">      &lt;&#x2F;view&gt;</span><br><span class="line">    &lt;&#x2F;view&gt;</span><br><span class="line">  &lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--block标签的使用--&gt;</span><br><span class="line">&lt;block wx:if&#x3D;&quot;&#123;&#123;show&#125;&#125;&quot;&gt; </span><br><span class="line">   &lt;view class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">      &lt;text&gt;内容&lt;&#x2F;text&gt;</span><br><span class="line">   &lt;&#x2F;view&gt;</span><br><span class="line">   &lt;view class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">      &lt;text&gt;内容&lt;&#x2F;text&gt;</span><br><span class="line">   &lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;block&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;block区块标签，不会渲染到页面。当有多个view要切换显示隐藏的时候，可以把多个view嵌套到block标签中</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--hidden属性和wx:if的区别--&gt;</span><br><span class="line"> &lt;view class&#x3D;&quot;content&quot;   wx:if&#x3D;&quot;&#123;&#123;show&#125;&#125;&quot;&gt;</span><br><span class="line">      &lt;text&gt;内容&lt;&#x2F;text&gt;</span><br><span class="line"> &lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line"> &lt;view class&#x3D;&quot;content&quot;   hidden&#x3D;&quot;&#123;&#123;!show&#125;&#125;&quot;&gt;</span><br><span class="line">      &lt;text&gt;内容&lt;&#x2F;text&gt;</span><br><span class="line"> &lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;wx:if 如果条件未false，则元素不会渲染到页面</span><br><span class="line">&#x2F;&#x2F;hidden: 如果条件为true，则元素会渲染到页面，只不过添加了display:none的属性让元素不显示</span><br><span class="line">&#x2F;&#x2F;频繁切换隐藏显示用hidden，不频繁切换用:if</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>路由懒加载</title>
    <url>/2020/10/29/%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<p>当打包构建应用时，Javascript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。</p>
<p>结合 Vue 的异步组件和 Webpack 的代码分割功能，轻松实现路由组件的懒加载。</p>
<p>第一步：定义一个能够被 Webpack 自动代码分割的异步组件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;在src&#x2F;router&#x2F;index.js里面引入异步引入组件</span><br><span class="line">const index &#x3D; () &#x3D;&gt; import(&#39;..&#x2F;page&#x2F;list&#x2F;index.vue&#39;);</span><br></pre></td></tr></table></figure>

<p>第二步：在路由配置中什么都不需要改变，只需要像往常一样使用 index。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: &#39;&#x2F;index&#39;, component: index,name:&quot;index&quot; &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>第三步：在build/webpack.base.conf.js下的output属性，新增chunkFilename。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    path: config.build.assetsRoot,</span><br><span class="line">    filename: &#39;[name].js&#39;,</span><br><span class="line">    &#x2F;&#x2F;新增chunkFilename属性</span><br><span class="line">    chunkFilename: &#39;[name].js&#39;,</span><br><span class="line">    publicPath: process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;production&#39;</span><br><span class="line">      ? config.build.assetsPublicPath</span><br><span class="line">      : config.dev.assetsPublicPath</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
  </entry>
  <entry>
    <title>小程序 uniapp</title>
    <url>/2020/09/10/uniapp/</url>
    <content><![CDATA[<p>#1.uni-app的基本使用</p>
<p>课程介绍：</p>
<p>基础部分：</p>
<ul>
<li>环境搭建</li>
<li>页面外观配置</li>
<li>数据绑定</li>
<li>uni-app的生命周期</li>
<li>组件的使用</li>
<li>uni-app中样式学习</li>
<li>在uni-app中使用字体图标和开启scss</li>
<li>条件注释跨端兼容</li>
<li>uni中的事件</li>
<li>导航跳转</li>
<li>组件创建和通讯，及组件的生命周期</li>
<li>uni-app中使用uni-ui库</li>
</ul>
<p>项目：极客商城项目</p>
<h2 id="1-1-uni-app介绍-官方网页"><a href="#1-1-uni-app介绍-官方网页" class="headerlink" title="1.1 uni-app介绍 官方网页"></a>1.1 uni-app介绍 <a href="https://uniapp.dcloud.io/resource">官方网页</a></h2><p><code>uni-app</code> 是一个使用 <a href="https://vuejs.org/">Vue.js</a> 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台。</p>
<p>即使不跨端，<code>uni-app</code>同时也是更好的小程序开发框架。</p>
<p>具有vue和微信小程序的开发经验，可快速上手uni-app</p>
<p>为什么要去学习uni-app？</p>
<p>相对开发者来说，减少了学习成本，因为只学会uni-app之后，即可开发出iOS、Android、H5、以及各种小程序的应用，不需要再去学习开发其他应用的框架，相对公司而言，也大大减少了开发成本。</p>
<h2 id="1-2-环境搭建"><a href="#1-2-环境搭建" class="headerlink" title="1.2 环境搭建"></a>1.2 环境搭建</h2><p>安装编辑器HbuilderX <a href="https://www.dcloud.io/hbuilderx.html">下载地址</a></p>
<p>HBuilderX是通用的前端开发工具，但为<code>uni-app</code>做了特别强化。</p>
<p>下载App开发版，可开箱即用</p>
<p>安装微信开发者工具 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">下载地址</a></p>
<h2 id="1-3-利用HbuilderX初始化项目-js"><a href="#1-3-利用HbuilderX初始化项目-js" class="headerlink" title="1.3 利用HbuilderX初始化项目(js)"></a>1.3 利用HbuilderX初始化项目(js)</h2><ul>
<li><p>点击HbuilderX菜单栏文件&gt;项目&gt;新建</p>
</li>
<li><p>选择uni-app,填写项目名称，项目创建的目录</p>
</li>
</ul>
<p>  <img src="https://i.loli.net/2020/11/09/LmBqE7uJa2KoGQl.png" alt="img"></p>
<h2 id="1-4-使用vue-cli脚手架创建ts项目"><a href="#1-4-使用vue-cli脚手架创建ts项目" class="headerlink" title="1.4 使用vue/cli脚手架创建ts项目"></a>1.4 使用vue/cli脚手架创建ts项目</h2><p>javascript</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vue create -p dcloudio/uni-preset-vue my-ts</span><br></pre></td></tr></table></figure>



<p><img src="https://i.loli.net/2020/11/09/4Kvbp9yzcCJ6gnj.png" alt="1602848342568.png"></p>
<p><strong>1602848342568.png</strong></p>
<h2 id="1-5-运行项目"><a href="#1-5-运行项目" class="headerlink" title="1.5 运行项目"></a>1.5 运行项目</h2><p>在菜单栏中点击运行，运行到浏览器，选择浏览器即可运行</p>
<p>在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 微信开发者工具，即可在微信开发者工具里面体验uni-app</p>
<p>在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到手机或模拟器 -&gt; 选择调式的手机</p>
<p><strong>注意：</strong></p>
<ul>
<li>如果是第一次使用，需要先配置小程序ide的相关路径，才能运行成功</li>
<li>微信开发者工具在设置中安全设置，服务端口开启</li>
</ul>
<h2 id="1-6-介绍项目目录和文件作用"><a href="#1-6-介绍项目目录和文件作用" class="headerlink" title="1.6 介绍项目目录和文件作用"></a>1.6 介绍项目目录和文件作用</h2><p><code>pages.json</code> 文件用来对 uni-app 进行全局配置，决定页面文件的路径、窗口样式、原生的导航栏、底部的原生tabbar 等</p>
<p><code>manifest.json</code> 文件是应用的配置文件，用于指定应用的名称、图标、权限等。</p>
<p><code>App.vue</code>是我们的跟组件，所有页面都是在<code>App.vue</code>下进行切换的，是页面入口文件，可以调用应用的生命周期函数。</p>
<p><code>main.js</code>是我们的项目入口文件，主要作用是初始化<code>vue</code>实例并使用需要的插件。</p>
<p><code>uni.scss</code>文件的用途是为了方便整体控制应用的风格。比如按钮颜色、边框风格，<code>uni.scss</code>文件里预置了一批scss变量预置。</p>
<p><code>unpackage</code> 就是打包目录，在这里有各个平台的打包文件</p>
<p><code>pages</code> 所有的页面存放目录</p>
<p><code>static</code> 静态资源目录，例如图片等</p>
<p><code>components</code> 组件存放目录</p>
<p>为了实现多端兼容，综合考虑编译速度、运行性能等因素，<code>uni-app</code> 约定了如下开发规范：</p>
<ul>
<li>页面文件遵循 <a href="https://vue-loader.vuejs.org/zh/spec.html">Vue 单文件组件 (SFC) 规范</a></li>
<li>组件标签靠近小程序规范，详见<a href="https://uniapp.dcloud.io/component/README">uni-app 组件规范</a></li>
<li>接口能力（JS API）靠近微信小程序规范，但需将前缀 <code>wx</code> 替换为 <code>uni</code>，详见<a href="https://uniapp.dcloud.io/api/README">uni-app接口规范</a></li>
<li>数据绑定及事件处理同 <code>Vue.js</code> 规范，同时补充了App及页面的生命周期</li>
<li>为兼容多端运行，建议使用flex布局进行开发</li>
</ul>
<h1 id="2-vue-ts语法"><a href="#2-vue-ts语法" class="headerlink" title="2.vue ts语法"></a>2.vue ts语法</h1><h2 id="2-1-基本使用"><a href="#2-1-基本使用" class="headerlink" title="2.1 基本使用"></a>2.1 基本使用</h2><p>javascript</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">        &lt;image <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;logo&quot;</span> src=<span class="string">&quot;/static/logo.png&quot;</span>&gt;&lt;/image&gt;</span><br><span class="line">        &lt;!--属性绑定--&gt;</span><br><span class="line">        &lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;text-area&quot;</span>&gt;</span><br><span class="line">            &lt;text <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;title&quot;</span>&gt;&#123;&#123;title&#125;&#125;&lt;/text&gt;</span><br><span class="line">            &lt;view&gt;&#123;&#123;age&#125;&#125;&lt;/view&gt;</span><br><span class="line">            &lt;image v-bind:src=<span class="string">&quot;img&quot;</span>&gt;&lt;/image&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">        &lt;!--v-<span class="keyword">if</span>和v-<span class="keyword">for</span>--&gt;</span><br><span class="line">        &lt;view v-<span class="keyword">for</span>=<span class="string">&quot;(item,i) in arr&quot;</span> :key=<span class="string">&quot;i&quot;</span>&gt;名字：&#123;&#123;item.name&#125;&#125;---年龄：&#123;&#123;item.age&#125;&#125;&lt;/view&gt;</span><br><span class="line">        &lt;view v-<span class="keyword">if</span>=<span class="string">&quot;flag&quot;</span>&gt;显示我&lt;/view&gt;</span><br><span class="line">        &lt;!--点击事件--&gt;</span><br><span class="line">        &lt;button @click=<span class="string">&quot;tapHandle(1,$event)&quot;</span>&gt;点我传参&lt;/button&gt;</span><br><span class="line">        &lt;button @click.self=<span class="string">&quot;printTitle&quot;</span>&gt;点我不传参&lt;/button&gt;</span><br><span class="line">        &lt;button @click.stop=<span class="string">&quot;title = &#x27;ggg&#x27;&quot;</span>&gt;点我修改title&lt;/button&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123;</span><br><span class="line">        Component,</span><br><span class="line">        Vue,</span><br><span class="line">        Watch</span><br><span class="line">    &#125; <span class="keyword">from</span> <span class="string">&quot;vue-property-decorator&quot;</span>;</span><br><span class="line"></span><br><span class="line">    @Component(&#123;&#125;)</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.响应式属性，对标之前的data函数返回的对象</span></span><br><span class="line">        private title: <span class="built_in">String</span> = <span class="string">&#x27;myTitle&#x27;</span>;</span><br><span class="line">        private num: <span class="built_in">Number</span> = <span class="number">123</span>;</span><br><span class="line">        private img: <span class="built_in">String</span> = <span class="string">&#x27;http://destiny001.gitee.io/image/monkey_02.jpg&#x27;</span></span><br><span class="line">        private arr: &#123;&#125; [] = [&#123;</span><br><span class="line">                name: <span class="string">&#x27;刘能&#x27;</span>,</span><br><span class="line">                age: <span class="number">29</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">&#x27;赵四&#x27;</span>,</span><br><span class="line">                age: <span class="number">39</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">&#x27;宋小宝&#x27;</span>,</span><br><span class="line">                age: <span class="number">49</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">&#x27;小沈阳&#x27;</span>,</span><br><span class="line">                age: <span class="number">59</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">        private flag: <span class="built_in">Boolean</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.计算属性</span></span><br><span class="line">        <span class="keyword">get</span> <span class="title">age</span>(): <span class="title">Number</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.num;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.生命周期</span></span><br><span class="line">        <span class="function"><span class="title">onLoad</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.printTitle();</span><br><span class="line">            <span class="keyword">let</span> a: string = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;onLoad~~~~~~~~~~~~~~~~&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">onShow</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;onShow~~~~~~~~~~~&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;mounted~~~~~~~~~~~~~~&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.属性监听 此处是监听title的变化</span></span><br><span class="line">        @Watch(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">        <span class="function"><span class="title">titleChange</span>(<span class="params">newVal: <span class="built_in">Number</span>, oldVal: <span class="built_in">Number</span></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(newVal, oldVal);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.methods，对标之前methods中写的方法</span></span><br><span class="line">        printTitle(): <span class="keyword">void</span> &#123; </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;hahahhhaha&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        tapHandle(num: number, <span class="attr">event</span>: any): <span class="keyword">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(num, event.type)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .content &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        flex-direction: column;</span><br><span class="line">        align-items: center;</span><br><span class="line">        justify-content: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .logo &#123;</span><br><span class="line">        height: <span class="number">200</span>rpx;</span><br><span class="line">        width: <span class="number">200</span>rpx;</span><br><span class="line">        margin-top: <span class="number">200</span>rpx;</span><br><span class="line">        margin-left: auto;</span><br><span class="line">        margin-right: auto;</span><br><span class="line">        margin-bottom: <span class="number">50</span>rpx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .text-area &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .title &#123;</span><br><span class="line">        font-size: <span class="number">36</span>rpx;</span><br><span class="line">        color: #8f8f94;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>





<p>javascript</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.vue-class-component：强化 Vue 组件，使用 TypeScript/装饰器 增强 Vue 组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.vue-property-decorator 是在 vue-class-component 上增强了更多的结合 Vue 特性的装饰器，新增了这 7 个装饰器：</span></span><br><span class="line">@Emit  </span><br><span class="line">@Inject    </span><br><span class="line">@Model</span><br><span class="line">@Prop</span><br><span class="line">@Provide</span><br><span class="line">@Watch</span><br><span class="line">@Component (从 vue-<span class="class"><span class="keyword">class</span>-<span class="title">component</span> 继承)</span></span><br></pre></td></tr></table></figure>

<h2 id="2-2-uni-app中组件的创建"><a href="#2-2-uni-app中组件的创建" class="headerlink" title="2.2 uni-app中组件的创建"></a>2.2 uni-app中组件的创建</h2><p><a href="https://juejin.im/post/6844903741456384014">https://juejin.im/post/6844903741456384014</a></p>
<p><a href="https://blog.csdn.net/sllailcp/article/details/102542796/">https://blog.csdn.net/sllailcp/article/details/102542796/</a></p>
<p><a href="https://www.jianshu.com/p/d8ed3aa76e9b">https://www.jianshu.com/p/d8ed3aa76e9b</a></p>
<p>在uni-app中，可以通过创建一个后缀名为vue的文件，即创建一个组件成功，其他组件可以将该组件通过impot的方式导入，在通过components进行注册即可</p>
<ul>
<li>创建head组件，在component中创建head.vue文件</li>
</ul>
<p>  javascript</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view&gt;</span><br><span class="line">        这是头部组件</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123; Component,Vue&#125; <span class="keyword">from</span> <span class="string">&quot;vue-property-decorator&quot;</span>;</span><br><span class="line"></span><br><span class="line">    @Component(&#123;&#125;)</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Head</span> <span class="keyword">extends</span> <span class="title">Vue</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>在其他组件中导入该组件并注册</li>
</ul>
<p>  javascript</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">        &lt;Head&gt;&lt;/Head&gt;</span><br><span class="line">        &lt;text&gt;</span><br><span class="line">            &#123;&#123;msg|msgFormat(<span class="string">&#x27;疯狂+1&#x27;</span>, <span class="string">&#x27;123&#x27;</span>)&#125;&#125;</span><br><span class="line">        &lt;/text&gt;</span><br><span class="line"></span><br><span class="line">        &lt;text v-fontsize=<span class="string">&quot;15&quot;</span>&gt;测试文字&lt;/text&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123;</span><br><span class="line">        Component,</span><br><span class="line">        Vue</span><br><span class="line">    &#125; <span class="keyword">from</span> <span class="string">&quot;vue-property-decorator&quot;</span>;</span><br><span class="line">    <span class="keyword">import</span> Head <span class="keyword">from</span> <span class="string">&#x27;@/components/head.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Component 装饰器可以接收一个对象作为参数，可以在对象中声明 components ，filters，directives等未提供装饰器的选项，也可以声明computed，watch等</span></span><br><span class="line">    @Component(&#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            Head</span><br><span class="line">        &#125;,</span><br><span class="line">        filters: &#123;</span><br><span class="line">            msgFormat: <span class="function"><span class="keyword">function</span>(<span class="params">msg: string, arg: string, arg2: string</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> msg.replace(<span class="regexp">/少年/g</span>, arg + arg2)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//只在浏览器中有效</span></span><br><span class="line">        directives: &#123; </span><br><span class="line">           <span class="string">&#x27;fontsize&#x27;</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123; </span><br><span class="line">                <span class="comment">// 注意：这个 function 等同于把代码写到了 bind 和 update 中去</span></span><br><span class="line">                el.style.fontSize = <span class="built_in">parseInt</span>(binding.value) + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">        private msg: <span class="built_in">String</span> = <span class="string">&#x27;曾经，我也是一个单纯的少年，单纯的我，傻傻的问，谁是世界上最单纯的男人&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用组件</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Head&gt;&lt;&#x2F;Head&gt;</span><br></pre></td></tr></table></figure>

<h2 id="2-3-组件的生命周期函数"><a href="#2-3-组件的生命周期函数" class="headerlink" title="2.3 组件的生命周期函数"></a>2.3 组件的生命周期函数</h2><table>
<thead>
<tr>
<th align="left">beforeCreate</th>
<th align="left">在实例初始化之后被调用。<a href="https://cn.vuejs.org/v2/api/#beforeCreate">详见</a></th>
<th align="left"></th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">created</td>
<td align="left">在实例创建完成后被立即调用。<a href="https://cn.vuejs.org/v2/api/#created">详见</a></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">beforeMount</td>
<td align="left">在挂载开始之前被调用。<a href="https://cn.vuejs.org/v2/api/#beforeMount">详见</a></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">mounted</td>
<td align="left">挂载到实例上去之后调用。<a href="https://cn.vuejs.org/v2/api/#mounted">详见</a> 注意：此处并不能确定子组件被全部挂载，如果需要子组件完全挂载之后在执行操作可以使用<code>$nextTick</code><a href="https://cn.vuejs.org/v2/api/#Vue-nextTick">Vue官方文档</a></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">beforeUpdate</td>
<td align="left">数据更新时调用，发生在虚拟 DOM 打补丁之前。<a href="https://cn.vuejs.org/v2/api/#beforeUpdate">详见</a></td>
<td align="left">仅H5平台支持</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">updated</td>
<td align="left">由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。<a href="https://cn.vuejs.org/v2/api/#updated">详见</a></td>
<td align="left">仅H5平台支持</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">beforeDestroy</td>
<td align="left">实例销毁之前调用。在这一步，实例仍然完全可用。<a href="https://cn.vuejs.org/v2/api/#beforeDestroy">详见</a></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">destroyed</td>
<td align="left">Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<a href="https://cn.vuejs.org/v2/api/#destroyed">详见</a></td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<h2 id="2-4-组件的通讯"><a href="#2-4-组件的通讯" class="headerlink" title="2.4 组件的通讯"></a>2.4 组件的通讯</h2><h3 id="2-4-1-父组件给子组件传值"><a href="#2-4-1-父组件给子组件传值" class="headerlink" title="2.4.1 父组件给子组件传值"></a>2.4.1 父组件给子组件传值</h3><p>head.vue通过@props来接受外界传递到组件内部的值</p>
<p>javascript</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view&gt;</span><br><span class="line">        这是头部组件</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123;</span><br><span class="line">        Component,</span><br><span class="line">        Vue,</span><br><span class="line">        Prop</span><br><span class="line">    &#125; <span class="keyword">from</span> <span class="string">&quot;vue-property-decorator&quot;</span>;</span><br><span class="line"></span><br><span class="line">    @Component(&#123;&#125;)</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Head</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        @Prop(options: (PropOptions | Constructor[] | Constructor) = &#123;&#125;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        @Prop装饰器接收一个参数，这个参数可以有三种写法：</span></span><br><span class="line"><span class="comment">        Constructor，例如String，Number，Boolean等，指定 prop 的类型；</span></span><br><span class="line"><span class="comment">        Constructor[]，指定 prop 的可选类型；</span></span><br><span class="line"><span class="comment">        PropOptions，可以使用以下选项：type，default，required，validator。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//!表示非null 非undefined</span></span><br><span class="line">        @Prop(<span class="built_in">String</span>) readonly name!: string | <span class="literal">undefined</span>;</span><br><span class="line">        @Prop(&#123;</span><br><span class="line">            <span class="keyword">default</span>: <span class="number">30</span>,</span><br><span class="line">            type: <span class="built_in">Number</span></span><br><span class="line">        &#125;) private age!: number;</span><br><span class="line">        @Prop([<span class="built_in">String</span>, <span class="built_in">Boolean</span>]) private sex!: string | boolean;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name,<span class="built_in">this</span>.age,<span class="built_in">this</span>.sex)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>其他组件在使用head组件的时候传递值</p>
<p>javascript</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">        &lt;Head :name=<span class="string">&quot;name&quot;</span> :age=<span class="string">&quot;age&quot;</span> :sex=<span class="string">&quot;sex&quot;</span>&gt;&lt;/Head&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123;</span><br><span class="line">        Component,</span><br><span class="line">        Vue</span><br><span class="line">    &#125; <span class="keyword">from</span> <span class="string">&quot;vue-property-decorator&quot;</span>;</span><br><span class="line">    <span class="keyword">import</span> Head <span class="keyword">from</span> <span class="string">&#x27;@/components/head.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">    @Component(&#123;</span><br><span class="line">        components:&#123;</span><br><span class="line">            Head</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">        private name = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">        private age = <span class="number">1</span>;</span><br><span class="line">        private sex = <span class="string">&#x27;nan&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-2-子组件给父组件传值"><a href="#2-4-2-子组件给父组件传值" class="headerlink" title="2.4.2 子组件给父组件传值"></a>2.4.2 子组件给父组件传值</h3><p>通过@emit触发事件进行传递参数</p>
<p>javascript</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line">&lt;Head :name=<span class="string">&quot;name&quot;</span> :age=<span class="string">&quot;age&quot;</span> :sex=<span class="string">&quot;sex&quot;</span> @del=<span class="string">&quot;delFromChild&quot;</span> @add=<span class="string">&quot;addFromChild&quot;</span>&gt;&lt;/Head&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">addFromChild</span>(<span class="params">data: any</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// this.emitData = data;</span></span><br><span class="line">    <span class="built_in">console</span>.log(data, <span class="string">&quot;父组件 returnPersons&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">delFromChild</span>(<span class="params">event: MouseEvent,data:any</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(this.emitData);</span></span><br><span class="line">    <span class="built_in">console</span>.log(event, <span class="string">&quot;父组件 delemit&quot;</span>,data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>javascript</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line"></span><br><span class="line">&lt;button @click=<span class="string">&quot;del($event,&#123;id:1&#125;)&quot;</span>&gt;点击触发del emit&lt;/button&gt;</span><br><span class="line">&lt;button @click=<span class="string">&quot;add(&#123;name:&#x27;张三&#x27;&#125;)&quot;</span>&gt;点击触发add emit&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        @Emit 装饰器接收一个可选参数，该参数是$Emit的第一个参数，充当事件名。如果没有提供这个参数，$Emit会将回调函数名的camelCase转为kebab-case，并将其作为事件名；</span></span><br><span class="line"><span class="comment">        @Emit会将回调函数的返回值作为第二个参数，如果返回值是一个Promise对象，$emit会在Promise对象被标记为resolved之后触发；</span></span><br><span class="line"><span class="comment">        @Emit的回调函数的参数，会放在其返回值之后，一起被$emit当做参数使用。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当前组件的del点击事件会触发delClick执行，delClick会触发父组件传递过来的del执行，就相当于之前的this.$emit()</span></span><br><span class="line">@Emit(<span class="string">&#x27;del&#x27;</span>) private <span class="function"><span class="title">delClick</span>(<span class="params">event: MouseEvent, data: any</span>)</span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="title">del</span>(<span class="params">event: MouseEvent, data: any</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.delClick(event, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果此处不设置别名字,则默认使用下面的函数命名,该函数既代表当前组件的点击事件，又代表触发父组件传递过来的add事件</span></span><br><span class="line">@Emit()</span><br><span class="line">add(p: &#123;</span><br><span class="line">    name: string</span><br><span class="line">    &#125;) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;add&quot;</span>)</span><br><span class="line">    <span class="comment">// 此处不return,则会默认使用括号里的参数p;</span></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-3-兄弟组件通讯"><a href="#2-4-3-兄弟组件通讯" class="headerlink" title="2.4.3 兄弟组件通讯"></a>2.4.3 兄弟组件通讯</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uni.$emit(eventName,OBJECT)  触发全局的自定事件。</span><br><span class="line">uni.$on(eventName,callback)  监听全局的自定义事件。事件可以由 uni.$emit 触发，回调函数会接收所有传入事件触发函数的额外参数。</span><br><span class="line">uni.$off([eventName, callback])  移除全局自定义事件监听器</span><br></pre></td></tr></table></figure>





<p>javascript</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.head.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view&gt;</span><br><span class="line">        &lt;text&gt;这是头部&lt;/text&gt;</span><br><span class="line"></span><br><span class="line">        &lt;button @click=<span class="string">&quot;send&quot;</span>&gt;点击向head发送数据&lt;/button&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123;</span><br><span class="line">        Component,</span><br><span class="line">        Vue</span><br><span class="line">    &#125; <span class="keyword">from</span> <span class="string">&quot;vue-property-decorator&quot;</span>;</span><br><span class="line"></span><br><span class="line">    @Component(&#123;&#125;)</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Head</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">        send():<span class="keyword">void</span>&#123;</span><br><span class="line">            uni.$emit(<span class="string">&quot;eventType1&quot;</span>,<span class="string">&quot;你好，head&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.foot.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view&gt;</span><br><span class="line">        &lt;text&gt;这是尾巴&lt;/text&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123;</span><br><span class="line">        Component,</span><br><span class="line">        Vue,</span><br><span class="line">        Prop,</span><br><span class="line">        Emit</span><br><span class="line">    &#125; <span class="keyword">from</span> <span class="string">&quot;vue-property-decorator&quot;</span>;</span><br><span class="line"></span><br><span class="line">    @Component(&#123;&#125;)</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Head</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            uni.$on(<span class="string">&quot;eventType1&quot;</span>,<span class="function">(<span class="params">data:any</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;收到来自foot的数据&quot;</span>,data)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//index.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">        &lt;Head&gt;&lt;/Head&gt;</span><br><span class="line">        &lt;Foot&gt;&lt;/Foot&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123;</span><br><span class="line">        Component,</span><br><span class="line">        Vue</span><br><span class="line">    &#125; <span class="keyword">from</span> <span class="string">&quot;vue-property-decorator&quot;</span>;</span><br><span class="line">    <span class="keyword">import</span> Head <span class="keyword">from</span> <span class="string">&#x27;@/components/head.vue&#x27;</span></span><br><span class="line">    <span class="keyword">import</span> Foot <span class="keyword">from</span> <span class="string">&#x27;@/components/foot.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">    @Component(&#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            Head,</span><br><span class="line">            Foot</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="3-全局配置和页面配置"><a href="#3-全局配置和页面配置" class="headerlink" title="3 全局配置和页面配置"></a>3 全局配置和页面配置</h1><h2 id="3-1-通过globalStyle进行全局配置"><a href="#3-1-通过globalStyle进行全局配置" class="headerlink" title="3.1 通过globalStyle进行全局配置"></a>3.1 通过globalStyle进行全局配置</h2><p>用于设置应用的状态栏、导航条、标题、窗口背景色等。<a href="https://uniapp.dcloud.io/collocation/pages?id=globalstyle">详细文档</a></p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">默认值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">navigationBarBackgroundColor</td>
<td align="left">HexColor</td>
<td align="left">#F7F7F7</td>
<td align="left">导航栏背景颜色（同状态栏背景色）</td>
</tr>
<tr>
<td align="left">navigationBarTextStyle</td>
<td align="left">String</td>
<td align="left">white</td>
<td align="left">导航栏标题颜色及状态栏前景颜色，仅支持 black/white</td>
</tr>
<tr>
<td align="left">navigationBarTitleText</td>
<td align="left">String</td>
<td align="left"></td>
<td align="left">导航栏标题文字内容</td>
</tr>
<tr>
<td align="left">backgroundColor</td>
<td align="left">HexColor</td>
<td align="left">#ffffff</td>
<td align="left">窗口的背景色</td>
</tr>
<tr>
<td align="left">backgroundTextStyle</td>
<td align="left">String</td>
<td align="left">dark</td>
<td align="left">下拉 loading 的样式，仅支持 dark / light</td>
</tr>
<tr>
<td align="left">enablePullDownRefresh</td>
<td align="left">Boolean</td>
<td align="left">false</td>
<td align="left">是否开启下拉刷新，详见<a href="https://uniapp.dcloud.io/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">页面生命周期</a>。</td>
</tr>
<tr>
<td align="left">onReachBottomDistance</td>
<td align="left">Number</td>
<td align="left">50</td>
<td align="left">页面上拉触底事件触发时距页面底部距离，单位只支持px，详见<a href="https://uniapp.dcloud.io/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">页面生命周期</a></td>
</tr>
</tbody></table>
<h2 id="3-2-创建新的message页面"><a href="#3-2-创建新的message页面" class="headerlink" title="3.2 创建新的message页面"></a>3.2 创建新的message页面</h2><p>右键pages新建message目录，在message目录下右键新建.vue文件,并选择基本模板</p>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">        这是信息页面</span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3-通过pages来配置页面"><a href="#3-3-通过pages来配置页面" class="headerlink" title="3.3 通过pages来配置页面"></a>3.3 通过pages来配置页面</h2><table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">默认值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">path</td>
<td align="left">String</td>
<td align="left"></td>
<td align="left">配置页面路径</td>
</tr>
<tr>
<td align="left">style</td>
<td align="left">Object</td>
<td align="left"></td>
<td align="left">配置页面窗口表现，配置项参考 <a href="https://uniapp.dcloud.io/collocation/pages?id=style">pageStyle</a></td>
</tr>
</tbody></table>
<p>pages数组数组中第一项表示应用启动页</p>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&quot;pages&quot;: [ </span><br><span class="line">        &#123;</span><br><span class="line">            &quot;path&quot;:&quot;pages/message/message&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;path&quot;: &quot;pages/index/index&quot;,</span><br><span class="line">            &quot;style&quot;: &#123;</span><br><span class="line">                &quot;navigationBarTitleText&quot;: &quot;uni-app&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>

<p>通过style修改页面的标题和导航栏背景色，并且设置h5下拉刷新的特有样式</p>
<p>js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;pages&quot;</span>: [ <span class="comment">//pages数组中第一项表示应用启动页，参考：https://uniapp.dcloud.io/collocation/pages</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;path&quot;</span>:<span class="string">&quot;pages/message/message&quot;</span>,</span><br><span class="line">            <span class="string">&quot;style&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;navigationBarBackgroundColor&quot;</span>: <span class="string">&quot;#007AFF&quot;</span>,</span><br><span class="line">                <span class="string">&quot;navigationBarTextStyle&quot;</span>: <span class="string">&quot;white&quot;</span>,</span><br><span class="line">                <span class="string">&quot;enablePullDownRefresh&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;disableScroll&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;h5&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;pullToRefresh&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#007AFF&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>

<h2 id="3-4-配置tabbar"><a href="#3-4-配置tabbar" class="headerlink" title="3.4 配置tabbar"></a>3.4 配置tabbar</h2><p>如果应用是一个多 tab 应用，可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页。</p>
<p><strong>Tips</strong></p>
<ul>
<li>当设置 position 为 top 时，将不会显示 icon</li>
<li>tabBar 中的 list 是一个数组，只能配置最少2个、最多5个 tab，tab 按数组的顺序排序。</li>
</ul>
<p><strong>属性说明：</strong></p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">必填</th>
<th align="left">默认值</th>
<th align="left">描述</th>
<th align="left">平台差异说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">color</td>
<td align="left">HexColor</td>
<td align="left">是</td>
<td align="left"></td>
<td align="left">tab 上的文字默认颜色</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">selectedColor</td>
<td align="left">HexColor</td>
<td align="left">是</td>
<td align="left"></td>
<td align="left">tab 上的文字选中时的颜色</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">backgroundColor</td>
<td align="left">HexColor</td>
<td align="left">是</td>
<td align="left"></td>
<td align="left">tab 的背景色</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">borderStyle</td>
<td align="left">String</td>
<td align="left">否</td>
<td align="left">black</td>
<td align="left">tabbar 上边框的颜色，仅支持 black/white</td>
<td align="left">App 2.3.4+ 支持其他颜色值</td>
</tr>
<tr>
<td align="left">list</td>
<td align="left">Array</td>
<td align="left">是</td>
<td align="left"></td>
<td align="left">tab 的列表，详见 list 属性说明，最少2个、最多5个 tab</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">position</td>
<td align="left">String</td>
<td align="left">否</td>
<td align="left">bottom</td>
<td align="left">可选值 bottom、top</td>
<td align="left">top 值仅微信小程序支持</td>
</tr>
</tbody></table>
<p>其中 list 接收一个数组，数组中的每个项都是一个对象，其属性值如下：</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pagePath</td>
<td align="left">String</td>
<td align="left">是</td>
<td align="left">页面路径，必须在 pages 中先定义</td>
</tr>
<tr>
<td align="left">text</td>
<td align="left">String</td>
<td align="left">是</td>
<td align="left">tab 上按钮文字，在 5+APP 和 H5 平台为非必填。例如中间可放一个没有文字的+号图标</td>
</tr>
<tr>
<td align="left">iconPath</td>
<td align="left">String</td>
<td align="left">否</td>
<td align="left">图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 postion 为 top 时，此参数无效，不支持网络图片，不支持字体图标</td>
</tr>
<tr>
<td align="left">selectedIconPath</td>
<td align="left">String</td>
<td align="left">否</td>
<td align="left">选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 postion 为 top 时，此参数无效</td>
</tr>
</tbody></table>
<p>案例代码：</p>
<p>js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;tabBar&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;list&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;text&quot;</span>: <span class="string">&quot;首页&quot;</span>,</span><br><span class="line">                <span class="string">&quot;pagePath&quot;</span>:<span class="string">&quot;pages/index/index&quot;</span>,</span><br><span class="line">                <span class="string">&quot;iconPath&quot;</span>:<span class="string">&quot;static/tabs/home.png&quot;</span>,</span><br><span class="line">                <span class="string">&quot;selectedIconPath&quot;</span>:<span class="string">&quot;static/tabs/home-active.png&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;text&quot;</span>: <span class="string">&quot;信息&quot;</span>,</span><br><span class="line">                <span class="string">&quot;pagePath&quot;</span>:<span class="string">&quot;pages/message/message&quot;</span>,</span><br><span class="line">                <span class="string">&quot;iconPath&quot;</span>:<span class="string">&quot;static/tabs/message.png&quot;</span>,</span><br><span class="line">                <span class="string">&quot;selectedIconPath&quot;</span>:<span class="string">&quot;static/tabs/message-active.png&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;text&quot;</span>: <span class="string">&quot;我们&quot;</span>,</span><br><span class="line">                <span class="string">&quot;pagePath&quot;</span>:<span class="string">&quot;pages/contact/contact&quot;</span>,</span><br><span class="line">                <span class="string">&quot;iconPath&quot;</span>:<span class="string">&quot;static/tabs/contact.png&quot;</span>,</span><br><span class="line">                <span class="string">&quot;selectedIconPath&quot;</span>:<span class="string">&quot;static/tabs/contact-active.png&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-5-condition启动模式配置"><a href="#3-5-condition启动模式配置" class="headerlink" title="3.5 condition启动模式配置"></a>3.5 condition启动模式配置</h2><p>启动模式配置，仅开发期间生效，用于模拟直达页面的场景，如：小程序转发后，用户点击所打开的页面。</p>
<p>记得要在微信开发工具里选中你要调试的模式</p>
<p><strong>属性说明：</strong></p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">是否必填</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">current</td>
<td align="left">Number</td>
<td align="left">是</td>
<td align="left">当前激活的模式，list节点的索引值</td>
</tr>
<tr>
<td align="left">list</td>
<td align="left">Array</td>
<td align="left">是</td>
<td align="left">启动模式列表</td>
</tr>
</tbody></table>
<p><strong>list说明：</strong></p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">是否必填</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">name</td>
<td align="left">String</td>
<td align="left">是</td>
<td align="left">启动模式名称</td>
</tr>
<tr>
<td align="left">path</td>
<td align="left">String</td>
<td align="left">是</td>
<td align="left">启动页面路径</td>
</tr>
<tr>
<td align="left">query</td>
<td align="left">String</td>
<td align="left">否</td>
<td align="left">启动参数，可在页面的 <a href="https://uniapp.dcloud.io/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">onLoad</a> 函数里获得</td>
</tr>
</tbody></table>
<h1 id="4-uni基础组件的基本使用"><a href="#4-uni基础组件的基本使用" class="headerlink" title="4 uni基础组件的基本使用"></a>4 uni基础组件的基本使用</h1><p>uni-app提供了丰富的基础组件给开发者，开发者可以像搭积木一样，组合各种组件拼接称自己的应用</p>
<p>uni-app中的组件，就像 <code>HTML</code> 中的 <code>div</code> 、<code>p</code>、<code>span</code> 等标签的作用一样，用于搭建页面的基础结构</p>
<h2 id="4-1-text文本组件的用法"><a href="#4-1-text文本组件的用法" class="headerlink" title="4.1 text文本组件的用法"></a>4.1 text文本组件的用法</h2><h4 id="001-text-组件的属性"><a href="#001-text-组件的属性" class="headerlink" title="001 - text 组件的属性"></a>001 - text 组件的属性</h4><table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">默认值</th>
<th align="left">必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">selectable</td>
<td align="left">boolean</td>
<td align="left">false</td>
<td align="left">否</td>
<td align="left">文本是否可选</td>
</tr>
<tr>
<td align="left">space</td>
<td align="left">string</td>
<td align="left">.</td>
<td align="left">否</td>
<td align="left">显示连续空格，可选参数：<code>ensp</code>、<code>emsp</code>、<code>nbsp</code></td>
</tr>
<tr>
<td align="left">decode</td>
<td align="left">boolean</td>
<td align="left">false</td>
<td align="left">否</td>
<td align="left">是否解码</td>
</tr>
</tbody></table>
<ul>
<li><code>text</code> 组件相当于行内标签、在同一行显示</li>
<li>除了文本节点以外的其他节点都无法长按选中</li>
</ul>
<h4 id="002-代码案例"><a href="#002-代码案例" class="headerlink" title="002 - 代码案例"></a>002 - 代码案例</h4><p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 长按文本是否可选 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">selectable</span>=<span class="string">&#x27;true&#x27;</span>&gt;</span>来了老弟<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 显示连续空格的方式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">space</span>=<span class="string">&#x27;ensp&#x27;</span>&gt;</span>来了  老弟<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">space</span>=<span class="string">&#x27;emsp&#x27;</span>&gt;</span>来了  老弟<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">space</span>=<span class="string">&#x27;nbsp&#x27;</span>&gt;</span>来了  老弟<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>skyblue<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 是否解码 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">decode</span>=<span class="string">&#x27;true&#x27;</span>&gt;</span><span class="symbol">&amp;nbsp;</span> <span class="symbol">&amp;lt;</span> <span class="symbol">&amp;gt;</span> <span class="symbol">&amp;amp;</span> <span class="symbol">&amp;apos;</span> <span class="symbol">&amp;ensp;</span> <span class="symbol">&amp;emsp;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-2-view视图容器组件的用法"><a href="#4-2-view视图容器组件的用法" class="headerlink" title="4.2 view视图容器组件的用法"></a>4.2 view视图容器组件的用法</h2><blockquote>
<p>View 视图容器， 类似于 HTML 中的 div</p>
</blockquote>
<h4 id="001-组件的属性"><a href="#001-组件的属性" class="headerlink" title="001 - 组件的属性"></a>001 - 组件的属性</h4><p><img src="https://i.loli.net/2020/11/09/7Atvbg1BofdWGaQ.png" alt="img"></p>
<h4 id="002-代码案例-1"><a href="#002-代码案例-1" class="headerlink" title="002 - 代码案例"></a>002 - 代码案例</h4><p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;box2_active&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&#x27;box1&#x27;</span> <span class="attr">hover-class</span>=<span class="string">&#x27;active&#x27;</span> <span class="attr">hover-stop-propagation</span> <span class="attr">:hover-start-time</span>=<span class="string">&quot;2000&quot;</span> <span class="attr">:hover-stay-time</span>=<span class="string">&#x27;2000&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-3-button按钮组件的用法"><a href="#4-3-button按钮组件的用法" class="headerlink" title="4.3 button按钮组件的用法"></a>4.3 button按钮组件的用法</h2><h4 id="001-组件的属性-1"><a href="#001-组件的属性-1" class="headerlink" title="001 - 组件的属性"></a>001 - 组件的属性</h4><table>
<thead>
<tr>
<th align="left">属性名</th>
<th align="left">类型</th>
<th align="left">默认值</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">size</td>
<td align="left">String</td>
<td align="left">default</td>
<td align="left">按钮的大小</td>
</tr>
<tr>
<td align="left">type</td>
<td align="left">String</td>
<td align="left">default</td>
<td align="left">按钮的样式类型</td>
</tr>
<tr>
<td align="left">plain</td>
<td align="left">Boolean</td>
<td align="left">false</td>
<td align="left">按钮是否镂空，背景色透明</td>
</tr>
<tr>
<td align="left">disabled</td>
<td align="left">Boolean</td>
<td align="left">false</td>
<td align="left">是否按钮</td>
</tr>
<tr>
<td align="left">loading</td>
<td align="left">Boolean</td>
<td align="left">false</td>
<td align="left">名称是否带 loading t图标</td>
</tr>
</tbody></table>
<ul>
<li><code>button</code> 组件默认独占一行，设置 <code>size</code> 为 <code>mini</code> 时可以在一行显示多个</li>
</ul>
<h4 id="002-案例代码"><a href="#002-案例代码" class="headerlink" title="002 - 案例代码"></a>002 - 案例代码</h4><p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">&#x27;mini&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;primary&#x27;</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">&#x27;mini&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;default&#x27;</span> <span class="attr">disabled</span>=<span class="string">&#x27;true&#x27;</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">&#x27;mini&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;warn&#x27;</span> <span class="attr">loading</span>=<span class="string">&#x27;true&#x27;</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-7-4-image组件的使用"><a href="#1-7-4-image组件的使用" class="headerlink" title="1.7.4 image组件的使用"></a>1.7.4 image组件的使用</h3><p><a href="https://uniapp.dcloud.io/component/image?id=image">image</a>图片。</p>
<table>
<thead>
<tr>
<th align="left">属性名</th>
<th align="left">类型</th>
<th align="left">默认值</th>
<th align="left">说明</th>
<th align="left">平台差异说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">src</td>
<td align="left">String</td>
<td align="left"></td>
<td align="left">图片资源地址</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">mode</td>
<td align="left">String</td>
<td align="left">‘scaleToFill’</td>
<td align="left">图片裁剪、缩放的模式</td>
<td align="left"></td>
</tr>
</tbody></table>
<p><strong>Tips</strong></p>
<ul>
<li><code>&lt;image&gt;</code> 组件默认宽度 300px、高度 225px；</li>
<li><code>src</code> 仅支持相对路径、绝对路径，支持 base64 码；</li>
<li>页面结构复杂，css样式太多的情况，使用 image 可能导致样式生效较慢，出现 “闪一下” 的情况，此时设置 <code>image&#123;will-change: transform&#125;</code> ,可优化此问题。</li>
</ul>
<h1 id="5-uni-app中的样式"><a href="#5-uni-app中的样式" class="headerlink" title="5 uni-app中的样式"></a>5 uni-app中的样式</h1><ul>
<li><p>rpx 即响应式px，一种根据屏幕宽度自适应的动态单位。以750宽的屏幕为基准，750rpx恰好为屏幕宽度。屏幕变宽，rpx 实际显示效果会等比放大。</p>
</li>
<li><p>使用<code>@import</code>语句可以导入外联样式表，<code>@import</code>后跟需要导入的外联样式表的相对路径，用<code>;</code>表示语句结束</p>
</li>
<li><p>支持基本常用的选择器class、id、element等</p>
</li>
<li><p>在 <code>uni-app</code> 中不能使用 <code>*</code> 选择器。</p>
</li>
<li><p><code>page</code> 相当于 <code>body</code> 节点</p>
</li>
<li><p>定义在 App.vue 中的样式为全局样式，作用于每一个页面。在 pages 目录下 的 vue 文件中定义的样式（scoped）为局部样式，只作用在对应的页面，并会覆盖 App.vue 中相同的选择器。</p>
</li>
<li><p><code>uni-app</code> 支持使用字体图标，使用方式与普通 <code>web</code> 项目相同，需要注意以下几点：</p>
<ul>
<li><p>字体文件小于 40kb，<code>uni-app</code> 会自动将其转化为 base64 格式；</p>
</li>
<li><p>字体文件大于等于 40kb， 需开发者自己转换，否则使用将不生效；</p>
</li>
<li><p>字体文件的引用路径推荐使用以 ~@ 开头的绝对路径。</p>
</li>
<li><p><a href="https://www.jianshu.com/p/f423b4e937af">https://www.jianshu.com/p/f423b4e937af</a></p>
</li>
</ul>
</li>
</ul>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">    font-family: test1-icon;</span><br><span class="line">    src: url(&#39;~@&#x2F;static&#x2F;iconfont.ttf&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>
<ul>
<li>如何使用scss或者less</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;1.安装插件</span><br><span class="line">npm install less less-loader --save</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.vue文件中使用 &lt;style lang&#x3D;&quot;less&quot;&gt;</span><br></pre></td></tr></table></figure>

<h1 id="6-uni的生命周期"><a href="#6-uni的生命周期" class="headerlink" title="6 uni的生命周期"></a>6 uni的生命周期</h1><h2 id="6-1-应用的生命周期"><a href="#6-1-应用的生命周期" class="headerlink" title="6.1 应用的生命周期"></a>6.1 应用的生命周期</h2><p>生命周期的概念：一个对象从创建、运行、销毁的整个过程被成为生命周期。</p>
<p>生命周期函数：在生命周期中每个阶段会伴随着每一个函数的触发，这些函数被称为生命周期函数</p>
<p><code>uni-app</code> 支持如下应用生命周期函数：</p>
<table>
<thead>
<tr>
<th align="left">函数名</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">onLaunch</td>
<td align="left">当<code>uni-app</code> 初始化完成时触发（全局只触发一次）</td>
</tr>
<tr>
<td align="left">onShow</td>
<td align="left">当 <code>uni-app</code> 启动，或从后台进入前台显示</td>
</tr>
<tr>
<td align="left">onHide</td>
<td align="left">当 <code>uni-app</code> 从前台进入后台</td>
</tr>
<tr>
<td align="left">onError</td>
<td align="left">当 <code>uni-app</code> 报错时触发</td>
</tr>
</tbody></table>
<h2 id="6-2-页面的生命周期"><a href="#6-2-页面的生命周期" class="headerlink" title="6.2 页面的生命周期"></a>6.2 页面的生命周期</h2><p><code>uni-app</code> 支持如下页面生命周期函数：</p>
<table>
<thead>
<tr>
<th align="left">函数名</th>
<th align="left">说明</th>
<th align="left">平台差异说明</th>
<th align="left">最低版本</th>
</tr>
</thead>
<tbody><tr>
<td align="left">onLoad</td>
<td align="left">监听页面加载，其参数为上个页面传递的数据，参数类型为Object（用于页面传参），参考<a href="https://uniapp.dcloud.io/api/router?id=navigateto">示例</a></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">onShow</td>
<td align="left">监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">onReady</td>
<td align="left">监听页面初次渲染完成。</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">onHide</td>
<td align="left">监听页面隐藏</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">onUnload</td>
<td align="left">监听页面卸载</td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<h1 id="7-uni相关API"><a href="#7-uni相关API" class="headerlink" title="7 uni相关API"></a>7 uni相关API</h1><h2 id="7-1-下拉刷新"><a href="#7-1-下拉刷新" class="headerlink" title="7.1 下拉刷新"></a>7.1 下拉刷新</h2><h3 id="7-1-1-开启下拉刷新"><a href="#7-1-1-开启下拉刷新" class="headerlink" title="7.1.1 开启下拉刷新"></a>7.1.1 开启下拉刷新</h3><p>在uni-app中有两种方式开启下拉刷新</p>
<ul>
<li>需要在 <code>pages.json</code> 里，找到的当前页面的pages节点，并在 <code>style</code> 选项中开启 <code>enablePullDownRefresh</code></li>
<li>通过调用uni.startPullDownRefresh方法来开启下拉刷新</li>
</ul>
<h4 id="a-通过配置文件开启"><a href="#a-通过配置文件开启" class="headerlink" title="a) 通过配置文件开启"></a>a) 通过配置文件开启</h4><p>通过pages.json文件中找到当前页面的pages节点，并在 <code>style</code> 选项中开启 <code>enablePullDownRefresh</code></p>
<p>js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;path&quot;</span>:<span class="string">&quot;pages/list/list&quot;</span>,</span><br><span class="line">    <span class="string">&quot;style&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;enablePullDownRefresh&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="b-通过API开启"><a href="#b-通过API开启" class="headerlink" title="b) 通过API开启"></a>b) 通过API开启</h4><p><a href="https://uniapp.dcloud.io/api/ui/pulldown">api文档</a></p>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">uni.startPullDownRefresh(&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="7-1-2-监听下拉刷新"><a href="#7-1-2-监听下拉刷新" class="headerlink" title="7.1.2 监听下拉刷新"></a>7.1.2 监听下拉刷新</h3><p>通过onPullDownRefresh可以监听到下拉刷新的动作</p>
<p>js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view&gt;</span><br><span class="line">        这是信息页面</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123;</span><br><span class="line">        Component,</span><br><span class="line">        Vue</span><br><span class="line">    &#125; <span class="keyword">from</span> <span class="string">&quot;vue-property-decorator&quot;</span>;</span><br><span class="line"></span><br><span class="line">    @Component(&#123;&#125;)</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        startPull(): <span class="keyword">void</span> &#123;</span><br><span class="line">            uni.startPullDownRefresh(&#123;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        onPullDownRefresh(): <span class="keyword">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;触发下拉刷新了&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-1-3-关闭下拉刷新"><a href="#7-1-3-关闭下拉刷新" class="headerlink" title="7.1.3 关闭下拉刷新"></a>7.1.3 关闭下拉刷新</h3><p>uni.stopPullDownRefresh() 停止当前页面下拉刷新</p>
<h2 id="7-2-上拉加载"><a href="#7-2-上拉加载" class="headerlink" title="7.2 上拉加载"></a>7.2 上拉加载</h2><p>通过在pages.json文件中找到当前页面的pages节点下style中配置onReachBottomDistance可以设置距离底部开启加载的距离，默认为50px</p>
<p>通过onReachBottom监听到触底的行为</p>
<p>js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view&gt;</span><br><span class="line">        &lt;view v-<span class="keyword">for</span>=<span class="string">&quot;(item,index) in arr&quot;</span> :key=<span class="string">&quot;index&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;item&quot;</span>&gt;</span><br><span class="line">            &#123;&#123;item&#125;&#125;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123;</span><br><span class="line">        Component,</span><br><span class="line">        Vue</span><br><span class="line">    &#125; <span class="keyword">from</span> <span class="string">&quot;vue-property-decorator&quot;</span>;</span><br><span class="line"></span><br><span class="line">    @Component(&#123;&#125;)</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">        private arr = [<span class="string">&#x27;前端&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;ui&#x27;</span>, <span class="string">&#x27;大数据&#x27;</span>, <span class="string">&#x27;前端&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;ui&#x27;</span>, <span class="string">&#x27;大数据&#x27;</span>,<span class="string">&#x27;ui&#x27;</span>, <span class="string">&#x27;大数据&#x27;</span>];</span><br><span class="line">        startPull(): <span class="keyword">void</span> &#123;</span><br><span class="line">            uni.startPullDownRefresh(&#123;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        onPullDownRefresh(): <span class="keyword">void</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;触发下拉刷新了&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">onReachBottom</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;触底了&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=<span class="string">&quot;less&quot;</span>&gt;</span><br><span class="line">    .item &#123;</span><br><span class="line">        height: <span class="number">100</span>px;</span><br><span class="line">        line-height: <span class="number">100</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//App.vue中添加</span></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    page&#123;</span><br><span class="line">        overflow-y:scroll!important;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="7-3-网络请求"><a href="#7-3-网络请求" class="headerlink" title="7.3 网络请求"></a>7.3 网络请求</h2><p>在uni中可以调用uni.request方法进行请求网络请求</p>
<p>需要注意的是：在小程序中网络相关的 API 在使用前需要配置域名白名单。</p>
<p>javascript</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">uni.request(&#123;</span><br><span class="line">    url: <span class="string">&#x27;http://localhost/myUniApp/php/login.php&#x27;</span>, <span class="comment">//仅为示例，并非真实接口地址。</span></span><br><span class="line">    data: &#123;<span class="comment">//参数</span></span><br><span class="line">        rawData: rawData,</span><br><span class="line">        code: loginRes.code</span><br><span class="line">    &#125;,</span><br><span class="line">    header: &#123;</span><br><span class="line">        <span class="string">&#x27;custom-header&#x27;</span>: <span class="string">&#x27;hello&#x27;</span> <span class="comment">//自定义请求头信息</span></span><br><span class="line">    &#125;,</span><br><span class="line">    method:<span class="string">&#x27;POST&#x27;</span><span class="comment">//请求方式  或GET</span></span><br><span class="line">    success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;返回&#x27;</span>, res.data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>请求示例</strong></p>
<p>js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view&gt;</span><br><span class="line">        &lt;button @click=<span class="string">&quot;sendGet&quot;</span>&gt;发送请求&lt;/button&gt;</span><br><span class="line">        &lt;view v-<span class="keyword">if</span>=<span class="string">&quot;movieData&quot;</span>&gt;</span><br><span class="line">            &lt;text&gt;电影名字：&#123;&#123;movieData.originalName&#125;&#125;&lt;/text&gt;</span><br><span class="line">            &lt;view&gt;</span><br><span class="line">                导演：</span><br><span class="line">                &lt;text v-<span class="keyword">for</span>=<span class="string">&quot;item in movieData.director&quot;</span>&gt;</span><br><span class="line">                    &#123;&#123;item.data[<span class="number">0</span>].name&#125;&#125;</span><br><span class="line">                &lt;/text&gt;</span><br><span class="line">            &lt;/view&gt;</span><br><span class="line">            &lt;view&gt;电影信息</span><br><span class="line">                &#123;&#123;movieData.data[<span class="number">0</span>].genre&#125;&#125;</span><br><span class="line">                &#123;&#123;movieData.data[<span class="number">0</span>].language&#125;&#125;</span><br><span class="line">                &#123;&#123;movieData.data[<span class="number">0</span>].description&#125;&#125;</span><br><span class="line">                &#123;&#123;movieData.data[<span class="number">0</span>].country&#125;&#125;</span><br><span class="line">            &lt;/view&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123;</span><br><span class="line">        Component,</span><br><span class="line">        Vue</span><br><span class="line">    &#125; <span class="keyword">from</span> <span class="string">&quot;vue-property-decorator&quot;</span>;</span><br><span class="line"></span><br><span class="line">    type MovieBasicType = &#123;</span><br><span class="line">        genre:string</span><br><span class="line">        name:string</span><br><span class="line">        lang:string</span><br><span class="line">        language:string</span><br><span class="line">        poster:string</span><br><span class="line">        description:string</span><br><span class="line">        country:string</span><br><span class="line">    &#125;</span><br><span class="line">    type MovieDirectorType = &#123;</span><br><span class="line">        name:string,</span><br><span class="line">        lang:string</span><br><span class="line">    &#125;</span><br><span class="line">    type MovieDataType = &#123;</span><br><span class="line">        id?:string,</span><br><span class="line">        originalName?:string,</span><br><span class="line">        duration?:number,</span><br><span class="line">        data?:MovieBasicType[],</span><br><span class="line">        director?:&#123;<span class="attr">data</span>:MovieDirectorType[]&#125;[]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Component(&#123;&#125;)</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">        private movieData:MovieDataType|<span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        sendGet():<span class="keyword">void</span> &#123;</span><br><span class="line">            uni.request(&#123;</span><br><span class="line">                url: <span class="string">&#x27;https://movie.querydata.org/api?id=1302425&#x27;</span>,</span><br><span class="line">                success:<span class="function">(<span class="params">res</span>) =&gt;</span>&#123;</span><br><span class="line">                    <span class="keyword">const</span> resobj = res.data;</span><br><span class="line">                    <span class="built_in">this</span>.movieData = resobj <span class="keyword">as</span> MovieDataType;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//uni-app中对ts的支持只是一般，没有非常严格</span></span><br></pre></td></tr></table></figure>

<h2 id="7-4-数据缓存"><a href="#7-4-数据缓存" class="headerlink" title="7.4 数据缓存"></a>7.4 数据缓存</h2><p><a href="https://uniapp.dcloud.io/api/storage/storage?id=setstorage">官方文档</a></p>
<p>javascript</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view&gt;</span><br><span class="line">        &lt;button type=<span class="string">&quot;primary&quot;</span> @click=<span class="string">&quot;setStor&quot;</span>&gt;存储数据-异步&lt;/button&gt;</span><br><span class="line">        &lt;button type=<span class="string">&quot;primary&quot;</span> @click=<span class="string">&quot;setStorSync&quot;</span>&gt;存储数据-同步&lt;/button&gt;</span><br><span class="line">        &lt;button type=<span class="string">&quot;primary&quot;</span> @click=<span class="string">&quot;getStorage&quot;</span>&gt;获取数据&lt;/button&gt;</span><br><span class="line">        &lt;button type=<span class="string">&quot;primary&quot;</span> @click=<span class="string">&quot;getStorageSync&quot;</span>&gt;获取数据-同步&lt;/button&gt;</span><br><span class="line">        &lt;button type=<span class="string">&quot;primary&quot;</span> @click=<span class="string">&quot;removeStorage&quot;</span>&gt;删除数据&lt;/button&gt;</span><br><span class="line">        &lt;button type=<span class="string">&quot;primary&quot;</span> @click=<span class="string">&quot;removeStorageSync&quot;</span>&gt;删除数据-同步&lt;/button&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123;</span><br><span class="line">        Component,</span><br><span class="line">        Vue</span><br><span class="line">    &#125; <span class="keyword">from</span> <span class="string">&quot;vue-property-decorator&quot;</span>;</span><br><span class="line"></span><br><span class="line">    @Component(&#123;&#125;)</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        setStor(): <span class="keyword">void</span> &#123;</span><br><span class="line">            uni.setStorage(&#123;</span><br><span class="line">                key: <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">                data: <span class="number">100</span>,</span><br><span class="line">                <span class="function"><span class="title">success</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&#x27;存储成功&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        setStorSync(): <span class="keyword">void</span> &#123;</span><br><span class="line">            uni.setStorageSync(<span class="string">&#x27;id2&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        getStorage(): <span class="keyword">void</span> &#123;</span><br><span class="line">            uni.getStorage(&#123;</span><br><span class="line">                key: <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">                success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(res)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        getStorageSync(): <span class="keyword">void</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> id = uni.getStorageSync(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(id)</span><br><span class="line">        &#125;</span><br><span class="line">        removeStorage(): <span class="keyword">void</span> &#123;</span><br><span class="line">            uni.removeStorage(&#123;</span><br><span class="line">                key: <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">                success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&#x27;删除成功&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        removeStorageSync(): <span class="keyword">void</span> &#123;</span><br><span class="line">            uni.removeStorageSync(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="7-5-上传图片、预览图片"><a href="#7-5-上传图片、预览图片" class="headerlink" title="7.5 上传图片、预览图片"></a>7.5 上传图片、预览图片</h2><h3 id="7-5-1-上传图片"><a href="#7-5-1-上传图片" class="headerlink" title="7.5.1 上传图片"></a>7.5.1 上传图片</h3><p>uni.chooseImage方法从本地相册选择图片或使用相机拍照。</p>
<p>案例代码</p>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;chooseImg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>上传图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">image</span> <span class="attr">v-for</span>=<span class="string">&quot;item in imgArr&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> &#123;</span></span><br><span class="line">        Component,</span><br><span class="line">        Vue</span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">from</span> <span class="string">&quot;vue-property-decorator&quot;</span>;</span></span><br><span class="line"></span><br><span class="line">    @Component(&#123;&#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span></span><br><span class="line">        private imgArr = []</span><br><span class="line"></span><br><span class="line"><span class="javascript">        chooseImg(): <span class="keyword">void</span> &#123;</span></span><br><span class="line">            uni.chooseImage(&#123;</span><br><span class="line">                count: 9,</span><br><span class="line"><span class="javascript">                success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.imgArr = res.tempFilePaths</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-5-2-预览图片"><a href="#7-5-2-预览图片" class="headerlink" title="7.5.2 预览图片"></a>7.5.2 预览图片</h3><p>结构</p>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">v-for</span>=<span class="string">&quot;item in imgArr&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;item&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;previewImg(item)&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>预览图片的方法</p>
<p>js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">previewImg (current:any):<span class="keyword">void</span> &#123;</span><br><span class="line">  uni.previewImage(&#123;</span><br><span class="line">    urls: <span class="built_in">this</span>.imgArr,</span><br><span class="line">    current</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-6-uni中的导航跳转"><a href="#7-6-uni中的导航跳转" class="headerlink" title="7.6 uni中的导航跳转"></a>7.6 uni中的导航跳转</h2><h3 id="7-6-1-利用navigator进行跳转"><a href="#7-6-1-利用navigator进行跳转" class="headerlink" title="7.6.1 利用navigator进行跳转"></a>7.6.1 利用navigator进行跳转</h3><p>navigator详细文档：<a href="https://uniapp.dcloud.io/component/navigator">文档地址</a></p>
<p>跳转到普通页面</p>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/about/about&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;navigator-hover&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;default&quot;</span>&gt;</span>跳转到关于页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>跳转到tabbar页面</p>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/message/message&quot;</span> <span class="attr">open-type</span>=<span class="string">&quot;switchTab&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;default&quot;</span>&gt;</span>跳转到message页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-6-2-利用编程式导航进行跳转"><a href="#7-6-2-利用编程式导航进行跳转" class="headerlink" title="7.6.2 利用编程式导航进行跳转"></a>7.6.2 利用编程式导航进行跳转</h3><p><a href="https://heylog.github.io/2019/11/23/uniapp-ji-chu-zhi-shi/[uni.navigateTo](https://uniapp.dcloud.io/api/router?id=navigateto)">导航跳转文档</a></p>
<h3 id="7-6-3-利用navigateTo进行导航跳转"><a href="#7-6-3-利用navigateTo进行导航跳转" class="headerlink" title="7.6.3 利用navigateTo进行导航跳转"></a>7.6.3 利用navigateTo进行导航跳转</h3><p>保留当前页面，跳转到应用内的某个页面，使用<code>uni.navigateBack</code>可以返回到原页面。</p>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;goAbout&quot;</span>&gt;</span>跳转到关于页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过navigateTo方法进行跳转到普通页面</p>
<p>js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">goAbout ():<span class="keyword">void</span> &#123;</span><br><span class="line">  uni.navigateTo(&#123;</span><br><span class="line">    url: <span class="string">&#x27;/pages/about/about&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>通过switchTab跳转到tabbar页面</strong></p>
<p>跳转到tabbar页面</p>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;goMessage&quot;</span>&gt;</span>跳转到message页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过switchTab方法进行跳转</p>
<p>js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">goMessage ():<span class="keyword">void</span>  &#123;</span><br><span class="line">  uni.switchTab(&#123;</span><br><span class="line">    url: <span class="string">&#x27;/pages/message/message&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>redirectTo进行跳转</strong></p>
<p>关闭当前页面，跳转到应用内的某个页面。</p>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;goMessage&quot;</span>&gt;</span>跳转到message页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- js --&gt;</span></span><br><span class="line">goMessage ():void  &#123;</span><br><span class="line">  uni.switchTab(&#123;</span><br><span class="line">    url: &#x27;/pages/message/message&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过onUnload测试当前组件确实卸载</p>
<p>js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onUnload () &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;组件卸载了&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-6-4-导航跳转传递参数"><a href="#7-6-4-导航跳转传递参数" class="headerlink" title="7.6.4 导航跳转传递参数"></a>7.6.4 导航跳转传递参数</h3><p>在导航进行跳转到下一个页面的同时，可以给下一个页面传递相应的参数，接收参数的页面可以通过onLoad生命周期进行接收</p>
<p>传递参数的页面</p>
<p>js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">goAbout ():<span class="keyword">void</span>  &#123;</span><br><span class="line">  uni.navigateTo(&#123;</span><br><span class="line">    url: <span class="string">&#x27;/pages/about/about?id=80&#x27;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接收参数的页面</p>
<p>js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onLoad (options) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="8-条件注释实现跨端兼容"><a href="#8-条件注释实现跨端兼容" class="headerlink" title="8 条件注释实现跨端兼容"></a>8 条件注释实现跨端兼容</h1><p>条件编译是用特殊的注释作为标记，在编译时根据这些特殊的注释，将注释里面的代码编译到不同平台。</p>
<p><strong>写法：</strong>以 #ifdef 加平台标识 开头，以 #endif 结尾。</p>
<p>平台标识</p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">平台</th>
<th align="left">参考文档</th>
</tr>
</thead>
<tbody><tr>
<td align="left">APP-PLUS</td>
<td align="left">5+App</td>
<td align="left"><a href="http://www.html5plus.org/doc/">HTML5+ 规范</a></td>
</tr>
<tr>
<td align="left">H5</td>
<td align="left">H5</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">MP-WEIXIN</td>
<td align="left">微信小程序</td>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/api/">微信小程序</a></td>
</tr>
<tr>
<td align="left">MP-ALIPAY</td>
<td align="left">支付宝小程序</td>
<td align="left"><a href="https://docs.alipay.com/mini/developer/getting-started">支付宝小程序</a></td>
</tr>
<tr>
<td align="left">MP-BAIDU</td>
<td align="left">百度小程序</td>
<td align="left"><a href="https://smartprogram.baidu.com/docs/develop/tutorial/codedir/">百度小程序</a></td>
</tr>
<tr>
<td align="left">MP-TOUTIAO</td>
<td align="left">头条小程序</td>
<td align="left"><a href="https://developer.toutiao.com/dev/cn/mini-app/develop/framework/basic-reference/introduction">头条小程序</a></td>
</tr>
<tr>
<td align="left">MP-QQ</td>
<td align="left">QQ小程序</td>
<td align="left">（目前仅cli版支持）</td>
</tr>
<tr>
<td align="left">MP</td>
<td align="left">微信小程序/支付宝小程序/百度小程序/头条小程序/QQ小程序</td>
<td align="left"></td>
</tr>
</tbody></table>
<h2 id="8-1-组件的条件注释"><a href="#8-1-组件的条件注释" class="headerlink" title="8.1 组件的条件注释"></a>8.1 组件的条件注释</h2><p>代码演示</p>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- #ifdef H5 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  h5页面会显示</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #endif --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #ifdef MP-WEIXIN --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  微信小程序会显示</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #endif --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #ifdef APP-PLUS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  app会显示</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #endif --&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="8-2-api的条件注释"><a href="#8-2-api的条件注释" class="headerlink" title="8.2 api的条件注释"></a>8.2 api的条件注释</h2><p>代码演示</p>
<p>js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onLoad () &#123;</span><br><span class="line">  <span class="comment">//#ifdef MP-WEIXIN</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;微信小程序&#x27;</span>)</span><br><span class="line">  <span class="comment">//#endif</span></span><br><span class="line">  <span class="comment">//#ifdef H5</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;h5页面&#x27;</span>)</span><br><span class="line">  <span class="comment">//#endif</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-3-样式的条件注释"><a href="#8-3-样式的条件注释" class="headerlink" title="8.3 样式的条件注释"></a>8.3 样式的条件注释</h2><p>代码演示</p>
<p>css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* #ifdef H5 */</span></span><br><span class="line"><span class="selector-tag">view</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* #endif */</span></span><br><span class="line"><span class="comment">/* #ifdef MP-WEIXIN */</span></span><br><span class="line"><span class="selector-tag">view</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* #endif */</span></span><br></pre></td></tr></table></figure>

<h1 id="9-uni-ui的使用"><a href="#9-uni-ui的使用" class="headerlink" title="9 uni-ui的使用"></a>9 uni-ui的使用</h1><p>uni-app中的UI组件库：<a href="https://ask.dcloud.net.cn/article/35489">https://ask.dcloud.net.cn/article/35489</a></p>
<p><a href="https://uniapp.dcloud.io/component/README?id=uniui">uni-ui文档</a></p>
<p>javascript</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.将资料中的uni-ui放入到项目components目录下(注意：不要npm install @dcloudio/uni-ui ，这种方式在子组件中无法使用)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.安装sass-loader</span></span><br><span class="line">npm install node-sass sass-loader@<span class="number">8.0</span><span class="number">.2</span>      重启hubuilderX</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.在页面组件和自定义组件中使用uni-ui</span></span><br><span class="line"><span class="keyword">import</span> uniBadge <span class="keyword">from</span> <span class="string">&quot;@/components/uni-ui/lib/uni-badge/uni-badge.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> uniGrid <span class="keyword">from</span> <span class="string">&quot;@/components/uni-ui/lib/uni-grid/uni-grid.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> uniGridItem <span class="keyword">from</span> <span class="string">&quot;@/components/uni-ui/lib/uni-grid-item/uni-grid-item.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        uniBadge,</span><br><span class="line">        uniGrid,</span><br><span class="line">        uniGridItem</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view&gt;</span><br><span class="line">        &lt;uni-badge text=<span class="string">&quot;1&quot;</span>&gt;&lt;/uni-badge&gt;</span><br><span class="line">        &lt;uni-badge text=<span class="string">&quot;2&quot;</span> type=<span class="string">&quot;success&quot;</span>&gt;&lt;/uni-badge&gt;</span><br><span class="line">        &lt;uni-badge text=<span class="string">&quot;3&quot;</span> type=<span class="string">&quot;primary&quot;</span> :inverted=<span class="string">&quot;true&quot;</span>&gt;&lt;/uni-badge&gt;</span><br><span class="line">        &lt;uni-grid :column=<span class="string">&quot;3&quot;</span>&gt;</span><br><span class="line">            &lt;uni-grid-item&gt;</span><br><span class="line">                &lt;text <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;text&quot;</span>&gt;文本&lt;/text&gt;</span><br><span class="line">            &lt;/uni-grid-item&gt;</span><br><span class="line">            &lt;uni-grid-item&gt;</span><br><span class="line">                &lt;text <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;text&quot;</span>&gt;文本&lt;/text&gt;</span><br><span class="line">            &lt;/uni-grid-item&gt;</span><br><span class="line">            &lt;uni-grid-item&gt;</span><br><span class="line">                &lt;text <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;text&quot;</span>&gt;文本&lt;/text&gt;</span><br><span class="line">            &lt;/uni-grid-item&gt;</span><br><span class="line">        &lt;/uni-grid&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
</search>
